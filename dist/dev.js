!function(t){var n={};function e(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(i,r,function(n){return t[n]}.bind(null,r));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var i=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},r=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var a=i+r>>>1;t(n[a],e)<0?i=a+1:r=a}return i},right:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var a=i+r>>>1;t(n[a],e)>0?r=a:i=a+1}return i}}};var a=r(i),f=a.right,o=(a.left,f);var c=Array.prototype,u=(c.slice,c.map,function(t,n,e){t=+t,n=+n,e=(r=arguments.length)<2?(n=t,t=0,1):r<3?1:+e;for(var i=-1,r=0|Math.max(0,Math.ceil((n-t)/e)),a=new Array(r);++i<r;)a[i]=t+i*e;return a}),s=Math.sqrt(50),h=Math.sqrt(10),l=Math.sqrt(2),d=function(t,n,e){var i,r,a,f,o=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((i=n<t)&&(r=t,t=n,n=r),0===(f=p(t,n,e))||!isFinite(f))return[];if(f>0)for(t=Math.ceil(t/f),n=Math.floor(n/f),a=new Array(r=Math.ceil(n-t+1));++o<r;)a[o]=(t+o)*f;else for(t=Math.floor(t*f),n=Math.ceil(n*f),a=new Array(r=Math.ceil(t-n+1));++o<r;)a[o]=(t-o)/f;return i&&a.reverse(),a};function p(t,n,e){var i=(n-t)/Math.max(0,e),r=Math.floor(Math.log(i)/Math.LN10),a=i/Math.pow(10,r);return r>=0?(a>=s?10:a>=h?5:a>=l?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(a>=s?10:a>=h?5:a>=l?2:1)}function _(t,n,e){var i=Math.abs(n-t)/Math.max(0,e),r=Math.pow(10,Math.floor(Math.log(i)/Math.LN10)),a=i/r;return a>=s?r*=10:a>=h?r*=5:a>=l&&(r*=2),n<t?-r:r}var b=function(t,n){var e,i,r=t.length,a=-1;if(null==n){for(;++a<r;)if(null!=(e=t[a])&&e>=e)for(i=e;++a<r;)null!=(e=t[a])&&e>i&&(i=e)}else for(;++a<r;)if(null!=(e=n(t[a],a,t))&&e>=e)for(i=e;++a<r;)null!=(e=n(t[a],a,t))&&e>i&&(i=e);return i},y=function(t){for(var n,e,i,r=t.length,a=-1,f=0;++a<r;)f+=t[a].length;for(e=new Array(f);--r>=0;)for(n=(i=t[r]).length;--n>=0;)e[--f]=i[n];return e};var v=Array.prototype.slice,g=function(t){return t},x=1,m=2,w=3,M=4,A=1e-6;function N(t){return"translate("+(t+.5)+",0)"}function T(t){return"translate(0,"+(t+.5)+")"}function k(){return!this.__axis}function C(t,n){var e=[],i=null,r=null,a=6,f=6,o=3,c=t===x||t===M?-1:1,u=t===M||t===m?"x":"y",s=t===x||t===w?N:T;function h(h){var l=null==i?n.ticks?n.ticks.apply(n,e):n.domain():i,d=null==r?n.tickFormat?n.tickFormat.apply(n,e):g:r,p=Math.max(a,0)+o,_=n.range(),b=+_[0]+.5,y=+_[_.length-1]+.5,v=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),N=h.selection?h.selection():h,T=N.selectAll(".domain").data([null]),C=N.selectAll(".tick").data(l,n).order(),S=C.exit(),E=C.enter().append("g").attr("class","tick"),U=C.select("line"),P=C.select("text");T=T.merge(T.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),C=C.merge(E),U=U.merge(E.append("line").attr("stroke","currentColor").attr(u+"2",c*a)),P=P.merge(E.append("text").attr("fill","currentColor").attr(u,c*p).attr("dy",t===x?"0em":t===w?"0.71em":"0.32em")),h!==N&&(T=T.transition(h),C=C.transition(h),U=U.transition(h),P=P.transition(h),S=S.transition(h).attr("opacity",A).attr("transform",function(t){return isFinite(t=v(t))?s(t):this.getAttribute("transform")}),E.attr("opacity",A).attr("transform",function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:v(t))})),S.remove(),T.attr("d",t===M||t==m?f?"M"+c*f+","+b+"H0.5V"+y+"H"+c*f:"M0.5,"+b+"V"+y:f?"M"+b+","+c*f+"V0.5H"+y+"V"+c*f:"M"+b+",0.5H"+y),C.attr("opacity",1).attr("transform",function(t){return s(v(t))}),U.attr(u+"2",c*a),P.attr(u,c*p).text(d),N.filter(k).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===m?"start":t===M?"end":"middle"),N.each(function(){this.__axis=v})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=v.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:v.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(i=null==t?null:v.call(t),h):i&&i.slice()},h.tickFormat=function(t){return arguments.length?(r=t,h):r},h.tickSize=function(t){return arguments.length?(a=f=+t,h):a},h.tickSizeInner=function(t){return arguments.length?(a=+t,h):a},h.tickSizeOuter=function(t){return arguments.length?(f=+t,h):f},h.tickPadding=function(t){return arguments.length?(o=+t,h):o},h}var S={value:function(){}};function E(){for(var t,n=0,e=arguments.length,i={};n<e;++n){if(!(t=arguments[n]+"")||t in i)throw new Error("illegal type: "+t);i[t]=[]}return new U(i)}function U(t){this._=t}function P(t,n){for(var e,i=0,r=t.length;i<r;++i)if((e=t[i]).name===n)return e.value}function L(t,n,e){for(var i=0,r=t.length;i<r;++i)if(t[i].name===n){t[i]=S,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=e&&t.push({name:n,value:e}),t}U.prototype=E.prototype={constructor:U,on:function(t,n){var e,i,r=this._,a=(i=r,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!i.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),f=-1,o=a.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++f<o;)if(e=(t=a[f]).type)r[e]=L(r[e],t.name,n);else if(null==n)for(e in r)r[e]=L(r[e],t.name,null);return this}for(;++f<o;)if((e=(t=a[f]).type)&&(e=P(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new U(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,i,r=new Array(e),a=0;a<e;++a)r[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,e=(i=this._[t]).length;a<e;++a)i[a].value.apply(n,r)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,a=i.length;r<a;++r)i[r].value.apply(n,e)}};var D=E,R="http://www.w3.org/1999/xhtml",j={svg:"http://www.w3.org/2000/svg",xhtml:R,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},O=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),j.hasOwnProperty(n)?{space:j[n],local:t}:t};var F=function(t){var n=O(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===R&&n.documentElement.namespaceURI===R?n.createElement(t):n.createElementNS(e,t)}})(n)};function Y(){}var q=function(t){return null==t?Y:function(){return this.querySelector(t)}};function I(){return[]}var H=function(t){return null==t?I:function(){return this.querySelectorAll(t)}},z=function(t){return function(){return this.matches(t)}},X=function(t){return new Array(t.length)};function $(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}$.prototype={constructor:$,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var V="$";function B(t,n,e,i,r,a){for(var f,o=0,c=n.length,u=a.length;o<u;++o)(f=n[o])?(f.__data__=a[o],i[o]=f):e[o]=new $(t,a[o]);for(;o<c;++o)(f=n[o])&&(r[o]=f)}function Z(t,n,e,i,r,a,f){var o,c,u,s={},h=n.length,l=a.length,d=new Array(h);for(o=0;o<h;++o)(c=n[o])&&(d[o]=u=V+f.call(c,c.__data__,o,n),u in s?r[o]=c:s[u]=c);for(o=0;o<l;++o)(c=s[u=V+f.call(t,a[o],o,a)])?(i[o]=c,c.__data__=a[o],s[u]=null):e[o]=new $(t,a[o]);for(o=0;o<h;++o)(c=n[o])&&s[d[o]]===c&&(r[o]=c)}function W(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var Q=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function J(t,n){return t.style.getPropertyValue(n)||Q(t).getComputedStyle(t,null).getPropertyValue(n)}function G(t){return t.trim().split(/^|\s+/)}function K(t){return t.classList||new tt(t)}function tt(t){this._node=t,this._names=G(t.getAttribute("class")||"")}function nt(t,n){for(var e=K(t),i=-1,r=n.length;++i<r;)e.add(n[i])}function et(t,n){for(var e=K(t),i=-1,r=n.length;++i<r;)e.remove(n[i])}tt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function it(){this.textContent=""}function rt(){this.innerHTML=""}function at(){this.nextSibling&&this.parentNode.appendChild(this)}function ft(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ot(){return null}function ct(){var t=this.parentNode;t&&t.removeChild(this)}function ut(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function st(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var ht={},lt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ht={mouseenter:"mouseover",mouseleave:"mouseout"}));function dt(t,n,e){return t=pt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function pt(t,n,e){return function(i){var r=lt;lt=i;try{t.call(this,this.__data__,n,e)}finally{lt=r}}}function _t(t){return function(){var n=this.__on;if(n){for(var e,i=0,r=-1,a=n.length;i<a;++i)e=n[i],t.type&&e.type!==t.type||e.name!==t.name?n[++r]=e:this.removeEventListener(e.type,e.listener,e.capture);++r?n.length=r:delete this.__on}}}function bt(t,n,e){var i=ht.hasOwnProperty(t.type)?dt:pt;return function(r,a,f){var o,c=this.__on,u=i(n,a,f);if(c)for(var s=0,h=c.length;s<h;++s)if((o=c[s]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=u,o.capture=e),void(o.value=n);this.addEventListener(t.type,u,e),o={type:t.type,name:t.name,value:n,listener:u,capture:e},c?c.push(o):this.__on=[o]}}function yt(t,n,e){var i=Q(t),r=i.CustomEvent;"function"==typeof r?r=new r(n,e):(r=i.document.createEvent("Event"),e?(r.initEvent(n,e.bubbles,e.cancelable),r.detail=e.detail):r.initEvent(n,!1,!1)),t.dispatchEvent(r)}var vt=[null];function gt(t,n){this._groups=t,this._parents=n}function xt(){return new gt([[document.documentElement]],vt)}gt.prototype=xt.prototype={constructor:gt,select:function(t){"function"!=typeof t&&(t=q(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var a,f,o=n[r],c=o.length,u=i[r]=new Array(c),s=0;s<c;++s)(a=o[s])&&(f=t.call(a,a.__data__,s,o))&&("__data__"in a&&(f.__data__=a.__data__),u[s]=f);return new gt(i,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=H(t));for(var n=this._groups,e=n.length,i=[],r=[],a=0;a<e;++a)for(var f,o=n[a],c=o.length,u=0;u<c;++u)(f=o[u])&&(i.push(t.call(f,f.__data__,u,o)),r.push(f));return new gt(i,r)},filter:function(t){"function"!=typeof t&&(t=z(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var a,f=n[r],o=f.length,c=i[r]=[],u=0;u<o;++u)(a=f[u])&&t.call(a,a.__data__,u,f)&&c.push(a);return new gt(i,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each(function(t){p[++s]=t}),p;var e,i=n?Z:B,r=this._parents,a=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var f=a.length,o=new Array(f),c=new Array(f),u=new Array(f),s=0;s<f;++s){var h=r[s],l=a[s],d=l.length,p=t.call(h,h&&h.__data__,s,r),_=p.length,b=c[s]=new Array(_),y=o[s]=new Array(_);i(h,l,b,y,u[s]=new Array(d),p,n);for(var v,g,x=0,m=0;x<_;++x)if(v=b[x]){for(x>=m&&(m=x+1);!(g=y[m])&&++m<_;);v._next=g||null}}return(o=new gt(o,r))._enter=c,o._exit=u,o},enter:function(){return new gt(this._enter||this._groups.map(X),this._parents)},exit:function(){return new gt(this._exit||this._groups.map(X),this._parents)},join:function(t,n,e){var i=this.enter(),r=this,a=this.exit();return i="function"==typeof t?t(i):i.append(t+""),null!=n&&(r=n(r)),null==e?a.remove():e(a),i&&r?i.merge(r).order():r},merge:function(t){for(var n=this._groups,e=t._groups,i=n.length,r=e.length,a=Math.min(i,r),f=new Array(i),o=0;o<a;++o)for(var c,u=n[o],s=e[o],h=u.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=u[d]||s[d])&&(l[d]=c);for(;o<i;++o)f[o]=n[o];return new gt(f,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var i,r=t[n],a=r.length-1,f=r[a];--a>=0;)(i=r[a])&&(f&&4^i.compareDocumentPosition(f)&&f.parentNode.insertBefore(i,f),f=i);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=W);for(var e=this._groups,i=e.length,r=new Array(i),a=0;a<i;++a){for(var f,o=e[a],c=o.length,u=r[a]=new Array(c),s=0;s<c;++s)(f=o[s])&&(u[s]=f);u.sort(n)}return new gt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var i=t[n],r=0,a=i.length;r<a;++r){var f=i[r];if(f)return f}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,i=n.length;e<i;++e)for(var r,a=n[e],f=0,o=a.length;f<o;++f)(r=a[f])&&t.call(r,r.__data__,f,a);return this},attr:function(t,n){var e=O(t);if(arguments.length<2){var i=this.node();return e.local?i.getAttributeNS(e.space,e.local):i.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var i=n.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):J(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=G(t+"");if(arguments.length<2){for(var i=K(this.node()),r=-1,a=e.length;++r<a;)if(!i.contains(e[r]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?nt:et)(this,t)}}:n?function(t){return function(){nt(this,t)}}:function(t){return function(){et(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?it:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?rt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(at)},lower:function(){return this.each(ft)},append:function(t){var n="function"==typeof t?t:F(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:F(t),i=null==n?ot:"function"==typeof n?n:q(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),i.apply(this,arguments)||null)})},remove:function(){return this.each(ct)},clone:function(t){return this.select(t?st:ut)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var i,r,a=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),f=a.length;if(!(arguments.length<2)){for(o=n?bt:_t,null==e&&(e=!1),i=0;i<f;++i)this.each(o(a[i],n,e));return this}var o=this.node().__on;if(o)for(var c,u=0,s=o.length;u<s;++u)for(i=0,c=o[u];i<f;++i)if((r=a[i]).type===c.type&&r.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return yt(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return yt(this,t,n)}})(t,n))}};var mt=xt,wt=function(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],vt)},Mt=0;function At(){this._="@"+(++Mt).toString(36)}At.prototype=function(){return new At}.prototype={constructor:At,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function Nt(t,n,e,i,r,a,f,o,c,u){this.target=t,this.type=n,this.subject=e,this.identifier=i,this.active=r,this.x=a,this.y=f,this.dx=o,this.dy=c,this._=u}Nt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Tt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function kt(t,n){var e=Object.create(t.prototype);for(var i in n)e[i]=n[i];return e}function Ct(){}var St="\\s*([+-]?\\d+)\\s*",Et="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ut="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Pt=/^#([0-9a-f]{3})$/,Lt=/^#([0-9a-f]{6})$/,Dt=new RegExp("^rgb\\("+[St,St,St]+"\\)$"),Rt=new RegExp("^rgb\\("+[Ut,Ut,Ut]+"\\)$"),jt=new RegExp("^rgba\\("+[St,St,St,Et]+"\\)$"),Ot=new RegExp("^rgba\\("+[Ut,Ut,Ut,Et]+"\\)$"),Ft=new RegExp("^hsl\\("+[Et,Ut,Ut]+"\\)$"),Yt=new RegExp("^hsla\\("+[Et,Ut,Ut,Et]+"\\)$"),qt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function It(t){var n;return t=(t+"").trim().toLowerCase(),(n=Pt.exec(t))?new Vt((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=Lt.exec(t))?Ht(parseInt(n[1],16)):(n=Dt.exec(t))?new Vt(n[1],n[2],n[3],1):(n=Rt.exec(t))?new Vt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=jt.exec(t))?zt(n[1],n[2],n[3],n[4]):(n=Ot.exec(t))?zt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Ft.exec(t))?Zt(n[1],n[2]/100,n[3]/100,1):(n=Yt.exec(t))?Zt(n[1],n[2]/100,n[3]/100,n[4]):qt.hasOwnProperty(t)?Ht(qt[t]):"transparent"===t?new Vt(NaN,NaN,NaN,0):null}function Ht(t){return new Vt(t>>16&255,t>>8&255,255&t,1)}function zt(t,n,e,i){return i<=0&&(t=n=e=NaN),new Vt(t,n,e,i)}function Xt(t){return t instanceof Ct||(t=It(t)),t?new Vt((t=t.rgb()).r,t.g,t.b,t.opacity):new Vt}function $t(t,n,e,i){return 1===arguments.length?Xt(t):new Vt(t,n,e,null==i?1:i)}function Vt(t,n,e,i){this.r=+t,this.g=+n,this.b=+e,this.opacity=+i}function Bt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Zt(t,n,e,i){return i<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Qt(t,n,e,i)}function Wt(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof Qt)return new Qt(t.h,t.s,t.l,t.opacity);if(t instanceof Ct||(t=It(t)),!t)return new Qt;if(t instanceof Qt)return t;var n=(t=t.rgb()).r/255,e=t.g/255,i=t.b/255,r=Math.min(n,e,i),a=Math.max(n,e,i),f=NaN,o=a-r,c=(a+r)/2;return o?(f=n===a?(e-i)/o+6*(e<i):e===a?(i-n)/o+2:(n-e)/o+4,o/=c<.5?a+r:2-a-r,f*=60):o=c>0&&c<1?0:f,new Qt(f,o,c,t.opacity)}(t):new Qt(t,n,e,null==i?1:i)}function Qt(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}function Jt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Tt(Ct,It,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Tt(Vt,$t,kt(Ct,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Vt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Vt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Bt(this.r)+Bt(this.g)+Bt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Tt(Qt,Wt,kt(Ct,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Qt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Qt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,i=e+(e<.5?e:1-e)*n,r=2*e-i;return new Vt(Jt(t>=240?t-240:t+120,r,i),Jt(t,r,i),Jt(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Gt=Math.PI/180,Kt=180/Math.PI,tn=.96422,nn=1,en=.82521,rn=4/29,an=6/29,fn=3*an*an,on=an*an*an;function cn(t){if(t instanceof sn)return new sn(t.l,t.a,t.b,t.opacity);if(t instanceof yn){if(isNaN(t.h))return new sn(t.l,0,0,t.opacity);var n=t.h*Gt;return new sn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Vt||(t=Xt(t));var e,i,r=pn(t.r),a=pn(t.g),f=pn(t.b),o=hn((.2225045*r+.7168786*a+.0606169*f)/nn);return r===a&&a===f?e=i=o:(e=hn((.4360747*r+.3850649*a+.1430804*f)/tn),i=hn((.0139322*r+.0971045*a+.7141733*f)/en)),new sn(116*o-16,500*(e-o),200*(o-i),t.opacity)}function un(t,n,e,i){return 1===arguments.length?cn(t):new sn(t,n,e,null==i?1:i)}function sn(t,n,e,i){this.l=+t,this.a=+n,this.b=+e,this.opacity=+i}function hn(t){return t>on?Math.pow(t,1/3):t/fn+rn}function ln(t){return t>an?t*t*t:fn*(t-rn)}function dn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function pn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function _n(t){if(t instanceof yn)return new yn(t.h,t.c,t.l,t.opacity);if(t instanceof sn||(t=cn(t)),0===t.a&&0===t.b)return new yn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Kt;return new yn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function bn(t,n,e,i){return 1===arguments.length?_n(t):new yn(t,n,e,null==i?1:i)}function yn(t,n,e,i){this.h=+t,this.c=+n,this.l=+e,this.opacity=+i}Tt(sn,un,kt(Ct,{brighter:function(t){return new sn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new sn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Vt(dn(3.1338561*(n=tn*ln(n))-1.6168667*(t=nn*ln(t))-.4906146*(e=en*ln(e))),dn(-.9787684*n+1.9161415*t+.033454*e),dn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Tt(yn,bn,kt(Ct,{brighter:function(t){return new yn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new yn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return cn(this).rgb()}}));var vn=-.29227,gn=-.90649,xn=1.97294,mn=xn*gn,wn=1.78277*xn,Mn=1.78277*vn- -.14861*gn;function An(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof Nn)return new Nn(t.h,t.s,t.l,t.opacity);t instanceof Vt||(t=Xt(t));var n=t.r/255,e=t.g/255,i=t.b/255,r=(Mn*i+mn*n-wn*e)/(Mn+mn-wn),a=i-r,f=(xn*(e-r)-vn*a)/gn,o=Math.sqrt(f*f+a*a)/(xn*r*(1-r)),c=o?Math.atan2(f,a)*Kt-120:NaN;return new Nn(c<0?c+360:c,o,r,t.opacity)}(t):new Nn(t,n,e,null==i?1:i)}function Nn(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}function Tn(t,n,e,i,r){var a=t*t,f=a*t;return((1-3*t+3*a-f)*n+(4-6*a+3*f)*e+(1+3*t+3*a-3*f)*i+f*r)/6}Tt(Nn,An,kt(Ct,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Nn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Nn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Gt,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),i=Math.cos(t),r=Math.sin(t);return new Vt(255*(n+e*(-.14861*i+1.78277*r)),255*(n+e*(vn*i+gn*r)),255*(n+e*(xn*i)),this.opacity)}}));var kn=function(t){return function(){return t}};function Cn(t,n){return function(e){return t+e*n}}function Sn(t,n){var e=n-t;return e?Cn(t,e>180||e<-180?e-360*Math.round(e/360):e):kn(isNaN(t)?n:t)}function En(t){return 1==(t=+t)?Un:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(i){return Math.pow(t+i*n,e)}}(n,e,t):kn(isNaN(n)?e:n)}}function Un(t,n){var e=n-t;return e?Cn(t,e):kn(isNaN(t)?n:t)}var Pn=function t(n){var e=En(n);function i(t,n){var i=e((t=$t(t)).r,(n=$t(n)).r),r=e(t.g,n.g),a=e(t.b,n.b),f=Un(t.opacity,n.opacity);return function(n){return t.r=i(n),t.g=r(n),t.b=a(n),t.opacity=f(n),t+""}}return i.gamma=t,i}(1);function Ln(t){return function(n){var e,i,r=n.length,a=new Array(r),f=new Array(r),o=new Array(r);for(e=0;e<r;++e)i=$t(n[e]),a[e]=i.r||0,f[e]=i.g||0,o[e]=i.b||0;return a=t(a),f=t(f),o=t(o),i.opacity=1,function(t){return i.r=a(t),i.g=f(t),i.b=o(t),i+""}}}var Dn=Ln(function(t){var n=t.length-1;return function(e){var i=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),r=t[i],a=t[i+1],f=i>0?t[i-1]:2*r-a,o=i<n-1?t[i+2]:2*a-r;return Tn((e-i/n)*n,f,r,a,o)}}),Rn=(Ln(function(t){var n=t.length;return function(e){var i=Math.floor(((e%=1)<0?++e:e)*n),r=t[(i+n-1)%n],a=t[i%n],f=t[(i+1)%n],o=t[(i+2)%n];return Tn((e-i/n)*n,r,a,f,o)}}),function(t,n){return n-=t=+t,function(e){return t+n*e}}),jn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,On=new RegExp(jn.source,"g");var Fn,Yn,qn,In,Hn=function(t,n){var e,i,r,a=jn.lastIndex=On.lastIndex=0,f=-1,o=[],c=[];for(t+="",n+="";(e=jn.exec(t))&&(i=On.exec(n));)(r=i.index)>a&&(r=n.slice(a,r),o[f]?o[f]+=r:o[++f]=r),(e=e[0])===(i=i[0])?o[f]?o[f]+=i:o[++f]=i:(o[++f]=null,c.push({i:f,x:Rn(e,i)})),a=On.lastIndex;return a<n.length&&(r=n.slice(a),o[f]?o[f]+=r:o[++f]=r),o.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,i=0;i<n;++i)o[(e=c[i]).i]=e.x(t);return o.join("")})},zn=function(t,n){var e,i=typeof n;return null==n||"boolean"===i?kn(n):("number"===i?Rn:"string"===i?(e=It(n))?(n=e,Pn):Hn:n instanceof It?Pn:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(i){return e.setTime(t+n*i),e}}:Array.isArray(n)?function(t,n){var e,i=n?n.length:0,r=t?Math.min(i,t.length):0,a=new Array(r),f=new Array(i);for(e=0;e<r;++e)a[e]=zn(t[e],n[e]);for(;e<i;++e)f[e]=n[e];return function(t){for(e=0;e<r;++e)f[e]=a[e](t);return f}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,i={},r={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?i[e]=zn(t[e],n[e]):r[e]=n[e];return function(t){for(e in i)r[e]=i[e](t);return r}}:Rn)(t,n)},Xn=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},$n=180/Math.PI,Vn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Bn=function(t,n,e,i,r,a){var f,o,c;return(f=Math.sqrt(t*t+n*n))&&(t/=f,n/=f),(c=t*e+n*i)&&(e-=t*c,i-=n*c),(o=Math.sqrt(e*e+i*i))&&(e/=o,i/=o,c/=o),t*i<n*e&&(t=-t,n=-n,c=-c,f=-f),{translateX:r,translateY:a,rotate:Math.atan2(n,t)*$n,skewX:Math.atan(c)*$n,scaleX:f,scaleY:o}};function Zn(t,n,e,i){function r(t){return t.length?t.pop()+" ":""}return function(a,f){var o=[],c=[];return a=t(a),f=t(f),function(t,i,r,a,f,o){if(t!==r||i!==a){var c=f.push("translate(",null,n,null,e);o.push({i:c-4,x:Rn(t,r)},{i:c-2,x:Rn(i,a)})}else(r||a)&&f.push("translate("+r+n+a+e)}(a.translateX,a.translateY,f.translateX,f.translateY,o,c),function(t,n,e,a){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),a.push({i:e.push(r(e)+"rotate(",null,i)-2,x:Rn(t,n)})):n&&e.push(r(e)+"rotate("+n+i)}(a.rotate,f.rotate,o,c),function(t,n,e,a){t!==n?a.push({i:e.push(r(e)+"skewX(",null,i)-2,x:Rn(t,n)}):n&&e.push(r(e)+"skewX("+n+i)}(a.skewX,f.skewX,o,c),function(t,n,e,i,a,f){if(t!==e||n!==i){var o=a.push(r(a)+"scale(",null,",",null,")");f.push({i:o-4,x:Rn(t,e)},{i:o-2,x:Rn(n,i)})}else 1===e&&1===i||a.push(r(a)+"scale("+e+","+i+")")}(a.scaleX,a.scaleY,f.scaleX,f.scaleY,o,c),a=f=null,function(t){for(var n,e=-1,i=c.length;++e<i;)o[(n=c[e]).i]=n.x(t);return o.join("")}}}var Wn=Zn(function(t){return"none"===t?Vn:(Fn||(Fn=document.createElement("DIV"),Yn=document.documentElement,qn=document.defaultView),Fn.style.transform=t,t=qn.getComputedStyle(Yn.appendChild(Fn),null).getPropertyValue("transform"),Yn.removeChild(Fn),t=t.slice(7,-1).split(","),Bn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Qn=Zn(function(t){return null==t?Vn:(In||(In=document.createElementNS("http://www.w3.org/2000/svg","g")),In.setAttribute("transform",t),(t=In.transform.baseVal.consolidate())?(t=t.matrix,Bn(t.a,t.b,t.c,t.d,t.e,t.f)):Vn)},", ",")",")");Math.SQRT2;function Jn(t){return function(n,e){var i=t((n=Wt(n)).h,(e=Wt(e)).h),r=Un(n.s,e.s),a=Un(n.l,e.l),f=Un(n.opacity,e.opacity);return function(t){return n.h=i(t),n.s=r(t),n.l=a(t),n.opacity=f(t),n+""}}}Jn(Sn),Jn(Un);function Gn(t){return function(n,e){var i=t((n=bn(n)).h,(e=bn(e)).h),r=Un(n.c,e.c),a=Un(n.l,e.l),f=Un(n.opacity,e.opacity);return function(t){return n.h=i(t),n.c=r(t),n.l=a(t),n.opacity=f(t),n+""}}}Gn(Sn),Gn(Un);function Kn(t){return function n(e){function i(n,i){var r=t((n=An(n)).h,(i=An(i)).h),a=Un(n.s,i.s),f=Un(n.l,i.l),o=Un(n.opacity,i.opacity);return function(t){return n.h=r(t),n.s=a(t),n.l=f(Math.pow(t,e)),n.opacity=o(t),n+""}}return e=+e,i.gamma=n,i}(1)}Kn(Sn);var te=Kn(Un);var ne,ee,ie=0,re=0,ae=0,fe=1e3,oe=0,ce=0,ue=0,se="object"==typeof performance&&performance.now?performance:Date,he="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function le(){return ce||(he(de),ce=se.now()+ue)}function de(){ce=0}function pe(){this._call=this._time=this._next=null}function _e(t,n,e){var i=new pe;return i.restart(t,n,e),i}function be(){ce=(oe=se.now())+ue,ie=re=0;try{!function(){le(),++ie;for(var t,n=ne;n;)(t=ce-n._time)>=0&&n._call.call(null,t),n=n._next;--ie}()}finally{ie=0,function(){var t,n,e=ne,i=1/0;for(;e;)e._call?(i>e._time&&(i=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:ne=n);ee=t,ve(i)}(),ce=0}}function ye(){var t=se.now(),n=t-oe;n>fe&&(ue-=n,oe=t)}function ve(t){ie||(re&&(re=clearTimeout(re)),t-ce>24?(t<1/0&&(re=setTimeout(be,t-se.now()-ue)),ae&&(ae=clearInterval(ae))):(ae||(oe=se.now(),ae=setInterval(ye,fe)),ie=1,he(be)))}pe.prototype=_e.prototype={constructor:pe,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?le():+e)+(null==n?0:+n),this._next||ee===this||(ee?ee._next=this:ne=this,ee=this),this._call=t,this._time=e,ve()},stop:function(){this._call&&(this._call=null,this._time=1/0,ve())}};var ge=function(t,n,e){var i=new pe;return n=null==n?0:+n,i.restart(function(e){i.stop(),t(e+n)},n,e),i},xe=D("start","end","cancel","interrupt"),me=[],we=0,Me=1,Ae=2,Ne=3,Te=4,ke=5,Ce=6,Se=function(t,n,e,i,r,a){var f=t.__transition;if(f){if(e in f)return}else t.__transition={};!function(t,n,e){var i,r=t.__transition;function a(c){var u,s,h,l;if(e.state!==Me)return o();for(u in r)if((l=r[u]).name===e.name){if(l.state===Ne)return ge(a);l.state===Te?(l.state=Ce,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete r[u]):+u<n&&(l.state=Ce,l.timer.stop(),l.on.call("cancel",t,t.__data__,l.index,l.group),delete r[u])}if(ge(function(){e.state===Ne&&(e.state=Te,e.timer.restart(f,e.delay,e.time),f(c))}),e.state=Ae,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Ae){for(e.state=Ne,i=new Array(h=e.tween.length),u=0,s=-1;u<h;++u)(l=e.tween[u].value.call(t,t.__data__,e.index,e.group))&&(i[++s]=l);i.length=s+1}}function f(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(o),e.state=ke,1),a=-1,f=i.length;++a<f;)i[a].call(t,r);e.state===ke&&(e.on.call("end",t,t.__data__,e.index,e.group),o())}function o(){for(var i in e.state=Ce,e.timer.stop(),delete r[n],r)return;delete t.__transition}r[n]=e,e.timer=_e(function(t){e.state=Me,e.timer.restart(a,e.delay,e.time),e.delay<=t&&a(t-e.delay)},0,e.time)}(t,e,{name:n,index:i,group:r,on:xe,tween:me,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:we})};function Ee(t,n){var e=Pe(t,n);if(e.state>we)throw new Error("too late; already scheduled");return e}function Ue(t,n){var e=Pe(t,n);if(e.state>Ne)throw new Error("too late; already running");return e}function Pe(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Le=function(t,n){var e,i,r,a=t.__transition,f=!0;if(a){for(r in n=null==n?null:n+"",a)(e=a[r]).name===n?(i=e.state>Ae&&e.state<ke,e.state=Ce,e.timer.stop(),e.on.call(i?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete a[r]):f=!1;f&&delete t.__transition}};function De(t,n,e){var i=t._id;return t.each(function(){var t=Ue(this,i);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Pe(t,i).value[n]}}var Re=function(t,n){var e;return("number"==typeof n?Rn:n instanceof It?Pn:(e=It(n))?(n=e,Pn):Hn)(t,n)};var je=mt.prototype.constructor;function Oe(t){return function(){this.style.removeProperty(t)}}var Fe=0;function Ye(t,n,e,i){this._groups=t,this._parents=n,this._name=e,this._id=i}function qe(){return++Fe}var Ie=mt.prototype;Ye.prototype=function(t){return mt().transition(t)}.prototype={constructor:Ye,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=q(t));for(var i=this._groups,r=i.length,a=new Array(r),f=0;f<r;++f)for(var o,c,u=i[f],s=u.length,h=a[f]=new Array(s),l=0;l<s;++l)(o=u[l])&&(c=t.call(o,o.__data__,l,u))&&("__data__"in o&&(c.__data__=o.__data__),h[l]=c,Se(h[l],n,e,l,h,Pe(o,e)));return new Ye(a,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=H(t));for(var i=this._groups,r=i.length,a=[],f=[],o=0;o<r;++o)for(var c,u=i[o],s=u.length,h=0;h<s;++h)if(c=u[h]){for(var l,d=t.call(c,c.__data__,h,u),p=Pe(c,e),_=0,b=d.length;_<b;++_)(l=d[_])&&Se(l,n,e,_,d,p);a.push(d),f.push(c)}return new Ye(a,f,n,e)},filter:function(t){"function"!=typeof t&&(t=z(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var a,f=n[r],o=f.length,c=i[r]=[],u=0;u<o;++u)(a=f[u])&&t.call(a,a.__data__,u,f)&&c.push(a);return new Ye(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,i=n.length,r=e.length,a=Math.min(i,r),f=new Array(i),o=0;o<a;++o)for(var c,u=n[o],s=e[o],h=u.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=u[d]||s[d])&&(l[d]=c);for(;o<i;++o)f[o]=n[o];return new Ye(f,this._parents,this._name,this._id)},selection:function(){return new je(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=qe(),i=this._groups,r=i.length,a=0;a<r;++a)for(var f,o=i[a],c=o.length,u=0;u<c;++u)if(f=o[u]){var s=Pe(f,n);Se(f,t,e,u,o,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Ye(i,this._parents,t,e)},call:Ie.call,nodes:Ie.nodes,node:Ie.node,size:Ie.size,empty:Ie.empty,each:Ie.each,on:function(t,n){var e=this._id;return arguments.length<2?Pe(this.node(),e).on.on(t):this.each(function(t,n,e){var i,r,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Ee:Ue;return function(){var f=a(this,t),o=f.on;o!==i&&(r=(i=o).copy()).on(n,e),f.on=r}}(e,t,n))},attr:function(t,n){var e=O(t),i="transform"===e?Qn:Re;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var i,r,a;return function(){var f,o,c=e(this);if(null!=c)return(f=this.getAttributeNS(t.space,t.local))===(o=c+"")?null:f===i&&o===r?a:(r=o,a=n(i=f,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var i,r,a;return function(){var f,o,c=e(this);if(null!=c)return(f=this.getAttribute(t))===(o=c+"")?null:f===i&&o===r?a:(r=o,a=n(i=f,c));this.removeAttribute(t)}})(e,i,De(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var i,r,a=e+"";return function(){var f=this.getAttributeNS(t.space,t.local);return f===a?null:f===i?r:r=n(i=f,e)}}:function(t,n,e){var i,r,a=e+"";return function(){var f=this.getAttribute(t);return f===a?null:f===i?r:r=n(i=f,e)}})(e,i,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var i=O(t);return this.tween(e,(i.local?function(t,n){var e,i;function r(){var r=n.apply(this,arguments);return r!==i&&(e=(i=r)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,r)),e}return r._value=n,r}:function(t,n){var e,i;function r(){var r=n.apply(this,arguments);return r!==i&&(e=(i=r)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,r)),e}return r._value=n,r})(i,n))},style:function(t,n,e){var i="transform"==(t+="")?Wn:Re;return null==n?this.styleTween(t,function(t,n){var e,i,r;return function(){var a=J(this,t),f=(this.style.removeProperty(t),J(this,t));return a===f?null:a===e&&f===i?r:r=n(e=a,i=f)}}(t,i)).on("end.style."+t,Oe(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var i,r,a;return function(){var f=J(this,t),o=e(this),c=o+"";return null==o&&(this.style.removeProperty(t),c=o=J(this,t)),f===c?null:f===i&&c===r?a:(r=c,a=n(i=f,o))}}(t,i,De(this,"style."+t,n))).each(function(t,n){var e,i,r,a,f="style."+n,o="end."+f;return function(){var c=Ue(this,t),u=c.on,s=null==c.value[f]?a||(a=Oe(n)):void 0;u===e&&r===s||(i=(e=u).copy()).on(o,r=s),c.on=i}}(this._id,t)):this.styleTween(t,function(t,n,e){var i,r,a=e+"";return function(){var f=J(this,t);return f===a?null:f===i?r:r=n(i=f,e)}}(t,i,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==n)return this.tween(i,null);if("function"!=typeof n)throw new Error;return this.tween(i,function(t,n,e){var i,r;function a(){var a=n.apply(this,arguments);return a!==r&&(i=(r=a)&&function(t,n,e){return function(i){this.style.setProperty(t,n(i),e)}}(t,a,e)),i}return a._value=n,a}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(De(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var i,r=Pe(this.node(),e).tween,a=0,f=r.length;a<f;++a)if((i=r[a]).name===t)return i.value;return null}return this.each((null==n?function(t,n){var e,i;return function(){var r=Ue(this,t),a=r.tween;if(a!==e)for(var f=0,o=(i=e=a).length;f<o;++f)if(i[f].name===n){(i=i.slice()).splice(f,1);break}r.tween=i}}:function(t,n,e){var i,r;if("function"!=typeof e)throw new Error;return function(){var a=Ue(this,t),f=a.tween;if(f!==i){r=(i=f).slice();for(var o={name:n,value:e},c=0,u=r.length;c<u;++c)if(r[c].name===n){r[c]=o;break}c===u&&r.push(o)}a.tween=r}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Ee(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Ee(this,t).delay=n}})(n,t)):Pe(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Ue(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Ue(this,t).duration=n}})(n,t)):Pe(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Ue(this,t).ease=n}}(n,t)):Pe(this.node(),n).ease},end:function(){var t,n,e=this,i=e._id,r=e.size();return new Promise(function(a,f){var o={value:f},c={value:function(){0==--r&&a()}};e.each(function(){var e=Ue(this,i),r=e.on;r!==t&&((n=(t=r).copy())._.cancel.push(o),n._.interrupt.push(o),n._.end.push(c)),e.on=n})})}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var He=2*Math.PI,ze=(function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=He);function r(t){return n*Math.pow(2,10*--t)*Math.sin((i-t)/e)}return r.amplitude=function(n){return t(n,e*He)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=He);function r(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/e)}return r.amplitude=function(n){return t(n,e*He)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=He);function r(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((i-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((i+t)/e))/2}return r.amplitude=function(n){return t(n,e*He)},r.period=function(e){return t(n,e)},r}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Xe(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return ze.time=le(),ze;return e}mt.prototype.interrupt=function(t){return this.each(function(){Le(this,t)})},mt.prototype.transition=function(t){var n,e;t instanceof Ye?(n=t._id,t=t._name):(n=qe(),(e=ze).time=le(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,a=0;a<r;++a)for(var f,o=i[a],c=o.length,u=0;u<c;++u)(f=o[u])&&Se(f,t,n,u,o,e||Xe(f,n));return new Ye(i,this._parents,t,n)};["e","w"].map($e),["n","s"].map($e),["n","e","s","w","nw","ne","se","sw"].map($e);function $e(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Ve=Math.PI,Be=2*Ve,Ze=Be-1e-6;function We(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Qe(){return new We}We.prototype=Qe.prototype={constructor:We,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,i){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+i)},bezierCurveTo:function(t,n,e,i,r,a){this._+="C"+ +t+","+ +n+","+ +e+","+ +i+","+(this._x1=+r)+","+(this._y1=+a)},arcTo:function(t,n,e,i,r){t=+t,n=+n,e=+e,i=+i,r=+r;var a=this._x1,f=this._y1,o=e-t,c=i-n,u=a-t,s=f-n,h=u*u+s*s;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(s*o-c*u)>1e-6&&r){var l=e-a,d=i-f,p=o*o+c*c,_=l*l+d*d,b=Math.sqrt(p),y=Math.sqrt(h),v=r*Math.tan((Ve-Math.acos((p+h-_)/(2*b*y)))/2),g=v/y,x=v/b;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*u)+","+(n+g*s)),this._+="A"+r+","+r+",0,0,"+ +(s*l>u*d)+","+(this._x1=t+x*o)+","+(this._y1=n+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,i,r,a){t=+t,n=+n;var f=(e=+e)*Math.cos(i),o=e*Math.sin(i),c=t+f,u=n+o,s=1^a,h=a?i-r:r-i;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+u:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+c+","+u),e&&(h<0&&(h=h%Be+Be),h>Ze?this._+="A"+e+","+e+",0,1,"+s+","+(t-f)+","+(n-o)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=u):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Ve)+","+s+","+(this._x1=t+e*Math.cos(r))+","+(this._y1=n+e*Math.sin(r))))},rect:function(t,n,e,i){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +i+"h"+-e+"Z"},toString:function(){return this._}};var Je=Qe;function Ge(){}function Ke(t,n){var e=new Ge;if(t instanceof Ge)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var i,r=-1,a=t.length;if(null==n)for(;++r<a;)e.set(r,t[r]);else for(;++r<a;)e.set(n(i=t[r],r,t),i)}else if(t)for(var f in t)e.set(f,t[f]);return e}Ge.prototype=Ke.prototype={constructor:Ge,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var ti=Ke;function ni(){}var ei=ti.prototype;function ii(t,n){var e=new ni;if(t instanceof ni)t.each(function(t){e.add(t)});else if(t){var i=-1,r=t.length;if(null==n)for(;++i<r;)e.add(t[i]);else for(;++i<r;)e.add(n(t[i],i,t))}return e}ni.prototype=ii.prototype={constructor:ni,has:ei.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ei.remove,clear:ei.clear,values:ei.keys,size:ei.size,empty:ei.empty,each:ei.each};Array.prototype.slice;var ri={},ai={},fi=34,oi=10,ci=13;function ui(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function si(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var i in t)i in n||e.push(n[i]=i)}),e}function hi(t,n){var e=t+"",i=e.length;return i<n?new Array(n-i+1).join(0)+e:e}function li(t){var n,e=t.getUTCHours(),i=t.getUTCMinutes(),r=t.getUTCSeconds(),a=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+hi(-n,6):n>9999?"+"+hi(n,6):hi(n,4))+"-"+hi(t.getUTCMonth()+1,2)+"-"+hi(t.getUTCDate(),2)+(a?"T"+hi(e,2)+":"+hi(i,2)+":"+hi(r,2)+"."+hi(a,3)+"Z":r?"T"+hi(e,2)+":"+hi(i,2)+":"+hi(r,2)+"Z":i||e?"T"+hi(e,2)+":"+hi(i,2)+"Z":"")}var di=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function i(t,n){var i,r=[],a=t.length,f=0,o=0,c=a<=0,u=!1;function s(){if(c)return ai;if(u)return u=!1,ri;var n,i,r=f;if(t.charCodeAt(r)===fi){for(;f++<a&&t.charCodeAt(f)!==fi||t.charCodeAt(++f)===fi;);return(n=f)>=a?c=!0:(i=t.charCodeAt(f++))===oi?u=!0:i===ci&&(u=!0,t.charCodeAt(f)===oi&&++f),t.slice(r+1,n-1).replace(/""/g,'"')}for(;f<a;){if((i=t.charCodeAt(n=f++))===oi)u=!0;else if(i===ci)u=!0,t.charCodeAt(f)===oi&&++f;else if(i!==e)continue;return t.slice(r,n)}return c=!0,t.slice(r,a)}for(t.charCodeAt(a-1)===oi&&--a,t.charCodeAt(a-1)===ci&&--a;(i=s())!==ai;){for(var h=[];i!==ri&&i!==ai;)h.push(i),i=s();n&&null==(h=n(h,o++))||r.push(h)}return r}function r(n,e){return n.map(function(n){return e.map(function(t){return f(n[t])}).join(t)})}function a(n){return n.map(f).join(t)}function f(t){return null==t?"":t instanceof Date?li(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,a=i(t,function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=ui(t);return function(i,r){return n(e(i),r,t)}}(t,n):ui(t)});return a.columns=r||[],a},parseRows:i,format:function(n,e){return null==e&&(e=si(n)),[e.map(f).join(t)].concat(r(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=si(t)),r(t,n).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}},pi=di(","),_i=pi.parse,bi=(pi.parseRows,pi.format,pi.formatBody,pi.formatRows,di("\t")),yi=bi.parse;bi.parseRows,bi.format,bi.formatBody,bi.formatRows;function vi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var gi=function(t,n){return fetch(t,n).then(vi)};function xi(t){return function(n,e,i){return 2===arguments.length&&"function"==typeof e&&(i=e,e=void 0),gi(n,e).then(function(n){return t(n,i)})}}xi(_i),xi(yi);function mi(t){return function(n,e){return gi(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}mi("application/xml"),mi("text/html"),mi("image/svg+xml");function wi(t,n,e,i){if(isNaN(n)||isNaN(e))return t;var r,a,f,o,c,u,s,h,l,d=t._root,p={data:i},_=t._x0,b=t._y0,y=t._x1,v=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((u=n>=(a=(_+y)/2))?_=a:y=a,(s=e>=(f=(b+v)/2))?b=f:v=f,r=d,!(d=d[h=s<<1|u]))return r[h]=p,t;if(o=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===o&&e===c)return p.next=d,r?r[h]=p:t._root=p,t;do{r=r?r[h]=new Array(4):t._root=new Array(4),(u=n>=(a=(_+y)/2))?_=a:y=a,(s=e>=(f=(b+v)/2))?b=f:v=f}while((h=s<<1|u)==(l=(c>=f)<<1|o>=a));return r[l]=d,r[h]=p,t}var Mi=function(t,n,e,i,r){this.node=t,this.x0=n,this.y0=e,this.x1=i,this.y1=r};function Ai(t){return t[0]}function Ni(t){return t[1]}function Ti(t,n,e){var i=new ki(null==n?Ai:n,null==e?Ni:e,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function ki(t,n,e,i,r,a){this._x=t,this._y=n,this._x0=e,this._y0=i,this._x1=r,this._y1=a,this._root=void 0}function Ci(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Si=Ti.prototype=ki.prototype;Si.copy=function(){var t,n,e=new ki(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return e;if(!i.length)return e._root=Ci(i),e;for(t=[{source:i,target:e._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(n=i.source[r])&&(n.length?t.push({source:n,target:i.target[r]=new Array(4)}):i.target[r]=Ci(n));return e},Si.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return wi(this.cover(n,e),n,e,t)},Si.addAll=function(t){var n,e,i,r,a=t.length,f=new Array(a),o=new Array(a),c=1/0,u=1/0,s=-1/0,h=-1/0;for(e=0;e<a;++e)isNaN(i=+this._x.call(null,n=t[e]))||isNaN(r=+this._y.call(null,n))||(f[e]=i,o[e]=r,i<c&&(c=i),i>s&&(s=i),r<u&&(u=r),r>h&&(h=r));if(c>s||u>h)return this;for(this.cover(c,u).cover(s,h),e=0;e<a;++e)wi(this,f[e],o[e],t[e]);return this},Si.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,i=this._y0,r=this._x1,a=this._y1;if(isNaN(e))r=(e=Math.floor(t))+1,a=(i=Math.floor(n))+1;else{for(var f,o,c=r-e,u=this._root;e>t||t>=r||i>n||n>=a;)switch(o=(n<i)<<1|t<e,(f=new Array(4))[o]=u,u=f,c*=2,o){case 0:r=e+c,a=i+c;break;case 1:e=r-c,a=i+c;break;case 2:r=e+c,i=a-c;break;case 3:e=r-c,i=a-c}this._root&&this._root.length&&(this._root=u)}return this._x0=e,this._y0=i,this._x1=r,this._y1=a,this},Si.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},Si.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Si.find=function(t,n,e){var i,r,a,f,o,c,u,s=this._x0,h=this._y0,l=this._x1,d=this._y1,p=[],_=this._root;for(_&&p.push(new Mi(_,s,h,l,d)),null==e?e=1/0:(s=t-e,h=n-e,l=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(_=c.node)||(r=c.x0)>l||(a=c.y0)>d||(f=c.x1)<s||(o=c.y1)<h))if(_.length){var b=(r+f)/2,y=(a+o)/2;p.push(new Mi(_[3],b,y,f,o),new Mi(_[2],r,y,b,o),new Mi(_[1],b,a,f,y),new Mi(_[0],r,a,b,y)),(u=(n>=y)<<1|t>=b)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-u],p[p.length-1-u]=c)}else{var v=t-+this._x.call(null,_.data),g=n-+this._y.call(null,_.data),x=v*v+g*g;if(x<e){var m=Math.sqrt(e=x);s=t-m,h=n-m,l=t+m,d=n+m,i=_.data}}return i},Si.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(f=+this._y.call(null,t)))return this;var n,e,i,r,a,f,o,c,u,s,h,l,d=this._root,p=this._x0,_=this._y0,b=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((u=a>=(o=(p+b)/2))?p=o:b=o,(s=f>=(c=(_+y)/2))?_=c:y=c,n=d,!(d=d[h=s<<1|u]))return this;if(!d.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,l=h)}for(;d.data!==t;)if(i=d,!(d=d.next))return this;return(r=d.next)&&delete d.next,i?(r?i.next=r:delete i.next,this):n?(r?n[h]=r:delete n[h],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[l]=d:this._root=d),this):(this._root=r,this)},Si.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Si.root=function(){return this._root},Si.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},Si.visit=function(t){var n,e,i,r,a,f,o=[],c=this._root;for(c&&o.push(new Mi(c,this._x0,this._y0,this._x1,this._y1));n=o.pop();)if(!t(c=n.node,i=n.x0,r=n.y0,a=n.x1,f=n.y1)&&c.length){var u=(i+a)/2,s=(r+f)/2;(e=c[3])&&o.push(new Mi(e,u,s,a,f)),(e=c[2])&&o.push(new Mi(e,i,s,u,f)),(e=c[1])&&o.push(new Mi(e,u,r,a,s)),(e=c[0])&&o.push(new Mi(e,i,r,u,s))}return this},Si.visitAfter=function(t){var n,e=[],i=[];for(this._root&&e.push(new Mi(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var r=n.node;if(r.length){var a,f=n.x0,o=n.y0,c=n.x1,u=n.y1,s=(f+c)/2,h=(o+u)/2;(a=r[0])&&e.push(new Mi(a,f,o,s,h)),(a=r[1])&&e.push(new Mi(a,s,o,c,h)),(a=r[2])&&e.push(new Mi(a,f,h,s,u)),(a=r[3])&&e.push(new Mi(a,s,h,c,u))}i.push(n)}for(;n=i.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Si.x=function(t){return arguments.length?(this._x=t,this):this._x},Si.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Ei=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,i=t.slice(0,e);return[i.length>1?i[0]+i.slice(2):i,+t.slice(e+1)]},Ui=function(t){return(t=Ei(Math.abs(t)))?t[1]:NaN},Pi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Li(t){return new Di(t)}function Di(t){if(!(n=Pi.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}Li.prototype=Di.prototype,Di.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ri,ji,Oi,Fi,Yi=function(t){t:for(var n,e=t.length,i=1,r=-1;i<e;++i)switch(t[i]){case".":r=n=i;break;case"0":0===r&&(r=i),n=i;break;default:if(r>0){if(!+t[i])break t;r=0}}return r>0?t.slice(0,r)+t.slice(n+1):t},qi=function(t,n){var e=Ei(t,n);if(!e)return t+"";var i=e[0],r=e[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")},Ii={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return qi(100*t,n)},r:qi,s:function(t,n){var e=Ei(t,n);if(!e)return t+"";var i=e[0],r=e[1],a=r-(Ri=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,f=i.length;return a===f?i:a>f?i+new Array(a-f+1).join("0"):a>0?i.slice(0,a)+"."+i.slice(a):"0."+new Array(1-a).join("0")+Ei(t,Math.max(0,n+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Hi=function(t){return t},zi=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];ji=function(t){var n,e,i=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,i){for(var r=t.length,a=[],f=0,o=n[0],c=0;r>0&&o>0&&(c+o+1>i&&(o=Math.max(1,i-c)),a.push(t.substring(r-=o,r+o)),!((c+=o+1)>i));)o=n[f=(f+1)%n.length];return a.reverse().join(e)}):Hi,r=t.currency,a=t.decimal,f=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):Hi,o=t.percent||"%";function c(t){var n=(t=Li(t)).fill,e=t.align,c=t.sign,u=t.symbol,s=t.zero,h=t.width,l=t.comma,d=t.precision,p=t.trim,_=t.type;"n"===_?(l=!0,_="g"):Ii[_]||(null==d&&(d=12),p=!0,_="g"),(s||"0"===n&&"="===e)&&(s=!0,n="0",e="=");var b="$"===u?r[0]:"#"===u&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",y="$"===u?r[1]:/[%p]/.test(_)?o:"",v=Ii[_],g=/[defgprs%]/.test(_);function x(t){var r,o,u,x=b,m=y;if("c"===_)m=v(t)+m,t="";else{var w=(t=+t)<0;if(t=v(Math.abs(t),d),p&&(t=Yi(t)),w&&0==+t&&(w=!1),x=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+x,m=("s"===_?zi[8+Ri/3]:"")+m+(w&&"("===c?")":""),g)for(r=-1,o=t.length;++r<o;)if(48>(u=t.charCodeAt(r))||u>57){m=(46===u?a+t.slice(r+1):t.slice(r))+m,t=t.slice(0,r);break}}l&&!s&&(t=i(t,1/0));var M=x.length+t.length+m.length,A=M<h?new Array(h-M+1).join(n):"";switch(l&&s&&(t=i(A+t,A.length?h-m.length:1/0),A=""),e){case"<":t=x+t+m+A;break;case"=":t=x+A+t+m;break;case"^":t=A.slice(0,M=A.length>>1)+x+t+m+A.slice(M);break;default:t=A+x+t+m}return f(t)}return d=null==d?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,n){var e=c(((t=Li(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Ui(n)/3))),r=Math.pow(10,-i),a=zi[8+i/3];return function(t){return e(r*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Oi=ji.format,Fi=ji.formatPrefix;var Xi=function(){return new $i};function $i(){this.reset()}$i.prototype={constructor:$i,reset:function(){this.s=this.t=0},add:function(t){Bi(Vi,t,this.t),Bi(this,Vi.s,this.s),this.s?this.t+=Vi.t:this.s=Vi.t},valueOf:function(){return this.s}};var Vi=new $i;function Bi(t,n,e){var i=t.s=n+e,r=i-n,a=i-r;t.t=n-a+(e-r)}var Zi=1e-6,Wi=Math.PI,Qi=Wi/2,Ji=Wi/4,Gi=2*Wi,Ki=Wi/180,tr=Math.abs,nr=Math.atan,er=Math.atan2,ir=Math.cos,rr=(Math.ceil,Math.exp),ar=(Math.floor,Math.log),fr=(Math.pow,Math.sin),or=(Math.sign,Math.sqrt),cr=Math.tan;function ur(t){return t>1?0:t<-1?Wi:Math.acos(t)}function sr(t){return t>1?Qi:t<-1?-Qi:Math.asin(t)}function hr(){}Xi(),Xi();function lr(t){var n=t[0],e=t[1],i=ir(e);return[i*ir(n),i*fr(n),fr(e)]}function dr(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function pr(t){var n=or(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}Xi();function _r(t,n){return[tr(t)>Wi?t+Math.round(-t/Gi)*Gi:t,n]}_r.invert=_r;var br=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:hr,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},yr=function(t,n){return tr(t[0]-n[0])<Zi&&tr(t[1]-n[1])<Zi};function vr(t,n,e,i){this.x=t,this.z=n,this.o=e,this.e=i,this.v=!1,this.n=this.p=null}var gr=function(t,n,e,i,r){var a,f,o=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,i=t[0],f=t[n];if(yr(i,f)){for(r.lineStart(),a=0;a<n;++a)r.point((i=t[a])[0],i[1]);r.lineEnd()}else o.push(e=new vr(i,t,null,!0)),c.push(e.o=new vr(i,null,e,!1)),o.push(e=new vr(f,t,null,!1)),c.push(e.o=new vr(f,null,e,!0))}}),o.length){for(c.sort(n),xr(o),xr(c),a=0,f=c.length;a<f;++a)c[a].e=e=!e;for(var u,s,h=o[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;u=l.z,r.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(a=0,f=u.length;a<f;++a)r.point((s=u[a])[0],s[1]);else i(l.x,l.n.x,1,r);l=l.n}else{if(d)for(u=l.p.z,a=u.length-1;a>=0;--a)r.point((s=u[a])[0],s[1]);else i(l.x,l.p.x,-1,r);l=l.p}u=(l=l.o).z,d=!d}while(!l.v);r.lineEnd()}}};function xr(t){if(n=t.length){for(var n,e,i=0,r=t[0];++i<n;)r.n=e=t[i],e.p=r,r=e;r.n=e=t[0],e.p=r}}var mr=Xi(),wr=function(t,n){var e=n[0],i=n[1],r=fr(i),a=[fr(e),-ir(e),0],f=0,o=0;mr.reset(),1===r?i=Qi+Zi:-1===r&&(i=-Qi-Zi);for(var c=0,u=t.length;c<u;++c)if(h=(s=t[c]).length)for(var s,h,l=s[h-1],d=l[0],p=l[1]/2+Ji,_=fr(p),b=ir(p),y=0;y<h;++y,d=g,_=m,b=w,l=v){var v=s[y],g=v[0],x=v[1]/2+Ji,m=fr(x),w=ir(x),M=g-d,A=M>=0?1:-1,N=A*M,T=N>Wi,k=_*m;if(mr.add(er(k*A*fr(N),b*w+k*ir(N))),f+=T?M+A*Gi:M,T^d>=e^g>=e){var C=dr(lr(l),lr(v));pr(C);var S=dr(a,C);pr(S);var E=(T^M>=0?-1:1)*sr(S[2]);(i>E||i===E&&(C[0]||C[1]))&&(o+=T^M>=0?1:-1)}}return(f<-Zi||f<Zi&&mr<-Zi)^1&o},Mr=function(t,n,e,i){return function(r){var a,f,o,c=n(r),u=br(),s=n(u),h=!1,l={point:d,lineStart:_,lineEnd:b,polygonStart:function(){l.point=v,l.lineStart=g,l.lineEnd=x,f=[],a=[]},polygonEnd:function(){l.point=d,l.lineStart=_,l.lineEnd=b,f=y(f);var t=wr(a,i);f.length?(h||(r.polygonStart(),h=!0),gr(f,Nr,t,e,r)):t&&(h||(r.polygonStart(),h=!0),r.lineStart(),e(null,null,1,r),r.lineEnd()),h&&(r.polygonEnd(),h=!1),f=a=null},sphere:function(){r.polygonStart(),r.lineStart(),e(null,null,1,r),r.lineEnd(),r.polygonEnd()}};function d(n,e){t(n,e)&&r.point(n,e)}function p(t,n){c.point(t,n)}function _(){l.point=p,c.lineStart()}function b(){l.point=d,c.lineEnd()}function v(t,n){o.push([t,n]),s.point(t,n)}function g(){s.lineStart(),o=[]}function x(){v(o[0][0],o[0][1]),s.lineEnd();var t,n,e,i,c=s.clean(),l=u.result(),d=l.length;if(o.pop(),a.push(o),o=null,d)if(1&c){if((n=(e=l[0]).length-1)>0){for(h||(r.polygonStart(),h=!0),r.lineStart(),t=0;t<n;++t)r.point((i=e[t])[0],i[1]);r.lineEnd()}}else d>1&&2&c&&l.push(l.pop().concat(l.shift())),f.push(l.filter(Ar))}return l}};function Ar(t){return t.length>1}function Nr(t,n){return((t=t.x)[0]<0?t[1]-Qi-Zi:Qi-t[1])-((n=n.x)[0]<0?n[1]-Qi-Zi:Qi-n[1])}Mr(function(){return!0},function(t){var n,e=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(a,f){var o=a>0?Wi:-Wi,c=tr(a-e);tr(c-Wi)<Zi?(t.point(e,i=(i+f)/2>0?Qi:-Qi),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(o,i),t.point(a,i),n=0):r!==o&&c>=Wi&&(tr(e-r)<Zi&&(e-=r*Zi),tr(a-o)<Zi&&(a-=o*Zi),i=function(t,n,e,i){var r,a,f=fr(t-e);return tr(f)>Zi?nr((fr(n)*(a=ir(i))*fr(e)-fr(i)*(r=ir(n))*fr(t))/(r*a*f)):(n+i)/2}(e,i,a,f),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(o,i),n=0),t.point(e=a,i=f),r=o},lineEnd:function(){t.lineEnd(),e=i=NaN},clean:function(){return 2-n}}},function(t,n,e,i){var r;if(null==t)r=e*Qi,i.point(-Wi,r),i.point(0,r),i.point(Wi,r),i.point(Wi,0),i.point(Wi,-r),i.point(0,-r),i.point(-Wi,-r),i.point(-Wi,0),i.point(-Wi,r);else if(tr(t[0]-n[0])>Zi){var a=t[0]<n[0]?Wi:-Wi;r=e*a/2,i.point(-a,r),i.point(0,r),i.point(a,r)}else i.point(n[0],n[1])},[-Wi,-Qi]);Xi();Xi(),Xi();function Tr(t){this._context=t}Tr.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Gi)}},result:hr};Xi();function kr(){this._string=[]}function Cr(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}kr.prototype={_radius:4.5,_circle:Cr(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Cr(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function Sr(t){return function(n){var e=new Er;for(var i in t)e[i]=t[i];return e.stream=n,e}}function Er(){}Er.prototype={constructor:Er,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};ir(30*Ki);Sr({point:function(t,n){this.stream.point(t*Ki,n*Ki)}});function Ur(t){return function(n,e){var i=ir(n),r=ir(e),a=t(i*r);return[a*r*fr(n),a*fr(e)]}}function Pr(t){return function(n,e){var i=or(n*n+e*e),r=t(i),a=fr(r),f=ir(r);return[er(n*a,i*f),sr(i&&e*a/i)]}}var Lr=Ur(function(t){return or(2/(1+t))});Lr.invert=Pr(function(t){return 2*sr(t/2)});var Dr=Ur(function(t){return(t=ur(t))&&t/fr(t)});Dr.invert=Pr(function(t){return t});function Rr(t,n){return[t,ar(cr((Qi+n)/2))]}Rr.invert=function(t,n){return[t,2*nr(rr(n))-Qi]};function jr(t,n){return[t,n]}jr.invert=jr;var Or=1.340264,Fr=-.081106,Yr=893e-6,qr=.003796,Ir=or(3)/2;function Hr(t,n){var e=sr(Ir*fr(n)),i=e*e,r=i*i*i;return[t*ir(e)/(Ir*(Or+3*Fr*i+r*(7*Yr+9*qr*i))),e*(Or+Fr*i+r*(Yr+qr*i))]}Hr.invert=function(t,n){for(var e,i=n,r=i*i,a=r*r*r,f=0;f<12&&(a=(r=(i-=e=(i*(Or+Fr*r+a*(Yr+qr*r))-n)/(Or+3*Fr*r+a*(7*Yr+9*qr*r)))*i)*r*r,!(tr(e)<1e-12));++f);return[Ir*t*(Or+3*Fr*r+a*(7*Yr+9*qr*r))/ir(i),sr(fr(i)/Ir)]};function zr(t,n){var e=ir(n),i=ir(t)*e;return[e*fr(t)/i,fr(n)/i]}zr.invert=Pr(nr);function Xr(t,n){var e=n*n,i=e*e;return[t*(.8707-.131979*e+i*(i*(.003971*e-.001529*i)-.013791)),n*(1.007226+e*(.015085+i*(.028874*e-.044475-.005916*i)))]}Xr.invert=function(t,n){var e,i=n,r=25;do{var a=i*i,f=a*a;i-=e=(i*(1.007226+a*(.015085+f*(.028874*a-.044475-.005916*f)))-n)/(1.007226+a*(.045255+f*(.259866*a-.311325-.005916*11*f)))}while(tr(e)>Zi&&--r>0);return[t/(.8707+(a=i*i)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),i]};function $r(t,n){return[ir(n)*fr(t),fr(n)]}$r.invert=Pr(sr);function Vr(t,n){var e=ir(n),i=1+ir(t)*e;return[e*fr(t)/i,fr(n)/i]}Vr.invert=Pr(function(t){return 2*nr(t)});function Br(t,n){return[ar(cr((Qi+n)/2)),-t]}Br.invert=function(t,n){return[-n,2*nr(rr(t))-Qi]};function Zr(t){var n=0,e=t.children,i=e&&e.length;if(i)for(;--i>=0;)n+=e[i].value;else n=1;t.value=n}function Wr(t,n){var e,i,r,a,f,o=new Kr(t),c=+t.value&&(o.value=t.value),u=[o];for(null==n&&(n=Qr);e=u.pop();)if(c&&(e.value=+e.data.value),(r=n(e.data))&&(f=r.length))for(e.children=new Array(f),a=f-1;a>=0;--a)u.push(i=e.children[a]=new Kr(r[a])),i.parent=e,i.depth=e.depth+1;return o.eachBefore(Gr)}function Qr(t){return t.children}function Jr(t){t.data=t.data.data}function Gr(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Kr(t){this.data=t,this.depth=this.height=0,this.parent=null}Kr.prototype=Wr.prototype={constructor:Kr,count:function(){return this.eachAfter(Zr)},each:function(t){var n,e,i,r,a=this,f=[a];do{for(n=f.reverse(),f=[];a=n.pop();)if(t(a),e=a.children)for(i=0,r=e.length;i<r;++i)f.push(e[i])}while(f.length);return this},eachAfter:function(t){for(var n,e,i,r=this,a=[r],f=[];r=a.pop();)if(f.push(r),n=r.children)for(e=0,i=n.length;e<i;++e)a.push(n[e]);for(;r=f.pop();)t(r);return this},eachBefore:function(t){for(var n,e,i=this,r=[i];i=r.pop();)if(t(i),n=i.children)for(e=n.length-1;e>=0;--e)r.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,i=n.children,r=i&&i.length;--r>=0;)e+=i[r].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),i=n.ancestors(),r=null;for(t=e.pop(),n=i.pop();t===n;)r=t,t=e.pop(),n=i.pop();return r}(n,t),i=[n];n!==e;)n=n.parent,i.push(n);for(var r=i.length;t!==e;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return Wr(this).eachBefore(Jr)}};Array.prototype.slice;var ta=function(t,n,e,i,r){for(var a,f=t.children,o=-1,c=f.length,u=t.value&&(i-n)/t.value;++o<c;)(a=f[o]).y0=e,a.y1=r,a.x0=n,a.x1=n+=a.value*u};function na(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}na.prototype=Object.create(Kr.prototype);var ea=function(t,n,e,i,r){for(var a,f=t.children,o=-1,c=f.length,u=t.value&&(r-e)/t.value;++o<c;)(a=f[o]).x0=n,a.x1=i,a.y0=e,a.y1=e+=a.value*u},ia=(1+Math.sqrt(5))/2;function ra(t,n,e,i,r,a){for(var f,o,c,u,s,h,l,d,p,_,b,y=[],v=n.children,g=0,x=0,m=v.length,w=n.value;g<m;){c=r-e,u=a-i;do{s=v[x++].value}while(!s&&x<m);for(h=l=s,b=s*s*(_=Math.max(u/c,c/u)/(w*t)),p=Math.max(l/b,b/h);x<m;++x){if(s+=o=v[x].value,o<h&&(h=o),o>l&&(l=o),b=s*s*_,(d=Math.max(l/b,b/h))>p){s-=o;break}p=d}y.push(f={value:s,dice:c<u,children:v.slice(g,x)}),f.dice?ta(f,e,i,r,w?i+=u*s/w:a):ea(f,e,i,w?e+=c*s/w:r,a),w-=s,g=x}return y}(function t(n){function e(t,e,i,r,a){ra(n,t,e,i,r,a)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(ia),function t(n){function e(t,e,i,r,a){if((f=t._squarify)&&f.ratio===n)for(var f,o,c,u,s,h=-1,l=f.length,d=t.value;++h<l;){for(c=(o=f[h]).children,u=o.value=0,s=c.length;u<s;++u)o.value+=c[u].value;o.dice?ta(o,e,i,r,i+=(a-i)*o.value/d):ea(o,e,i,e+=(r-e)*o.value/d,a),d-=o.value}else t._squarify=f=ra(n,t,e,i,r,a),f.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(ia);var aa=function(){return Math.random()},fa=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(aa),function t(n){function e(t,e){var i,r;return t=null==t?0:+t,e=null==e?1:+e,function(){var a;if(null!=i)a=i,i=null;else do{i=2*n()-1,a=2*n()-1,r=i*i+a*a}while(!r||r>1);return t+e*a*Math.sqrt(-2*Math.log(r)/r)}}return e.source=t,e}(aa)),oa=(function t(n){function e(){var t=fa.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(aa),function t(n){function e(t){return function(){for(var e=0,i=0;i<t;++i)e+=n();return e}}return e.source=t,e}(aa));(function t(n){function e(t){var e=oa.source(n)(t);return function(){return e()/t}}return e.source=t,e})(aa),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(aa);function ca(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var ua=Array.prototype,sa=ua.map,ha=ua.slice,la={name:"implicit"};function da(){var t,n,e=function t(){var n=ti(),e=[],i=[],r=la;function a(t){var a=t+"",f=n.get(a);if(!f){if(r!==la)return r;n.set(a,f=e.push(t))}return i[(f-1)%i.length]}return a.domain=function(t){if(!arguments.length)return e.slice();e=[],n=ti();for(var i,r,f=-1,o=t.length;++f<o;)n.has(r=(i=t[f])+"")||n.set(r,e.push(i));return a},a.range=function(t){return arguments.length?(i=ha.call(t),a):i.slice()},a.unknown=function(t){return arguments.length?(r=t,a):r},a.copy=function(){return t(e,i).unknown(r)},ca.apply(a,arguments),a}().unknown(void 0),i=e.domain,r=e.range,a=[0,1],f=!1,o=0,c=0,s=.5;function h(){var e=i().length,h=a[1]<a[0],l=a[h-0],d=a[1-h];t=(d-l)/Math.max(1,e-o+2*c),f&&(t=Math.floor(t)),l+=(d-l-t*(e-o))*s,n=t*(1-o),f&&(l=Math.round(l),n=Math.round(n));var p=u(e).map(function(n){return l+t*n});return r(h?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(i(t),h()):i()},e.range=function(t){return arguments.length?(a=[+t[0],+t[1]],h()):a.slice()},e.rangeRound=function(t){return a=[+t[0],+t[1]],f=!0,h()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(f=!!t,h()):f},e.padding=function(t){return arguments.length?(o=Math.min(1,c=+t),h()):o},e.paddingInner=function(t){return arguments.length?(o=Math.min(1,t),h()):o},e.paddingOuter=function(t){return arguments.length?(c=+t,h()):c},e.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),h()):s},e.copy=function(){return da(i(),a).round(f).paddingInner(o).paddingOuter(c).align(s)},ca.apply(h(),arguments)}var pa=function(t){return function(){return t}},_a=function(t){return+t},ba=[0,1];function ya(t){return t}function va(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:pa(isNaN(n)?NaN:.5)}function ga(t){var n,e=t[0],i=t[t.length-1];return e>i&&(n=e,e=i,i=n),function(t){return Math.max(e,Math.min(i,t))}}function xa(t,n,e){var i=t[0],r=t[1],a=n[0],f=n[1];return r<i?(i=va(r,i),a=e(f,a)):(i=va(i,r),a=e(a,f)),function(t){return a(i(t))}}function ma(t,n,e){var i=Math.min(t.length,n.length)-1,r=new Array(i),a=new Array(i),f=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++f<i;)r[f]=va(t[f],t[f+1]),a[f]=e(n[f],n[f+1]);return function(n){var e=o(t,n,1,i)-1;return a[e](r[e](n))}}function wa(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Ma(){var t,n,e,i,r,a,f=ba,o=ba,c=zn,u=ya;function s(){return i=Math.min(f.length,o.length)>2?ma:xa,r=a=null,h}function h(n){return isNaN(n=+n)?e:(r||(r=i(f.map(t),o,c)))(t(u(n)))}return h.invert=function(e){return u(n((a||(a=i(o,f.map(t),Rn)))(e)))},h.domain=function(t){return arguments.length?(f=sa.call(t,_a),u===ya||(u=ga(f)),s()):f.slice()},h.range=function(t){return arguments.length?(o=ha.call(t),s()):o.slice()},h.rangeRound=function(t){return o=ha.call(t),c=Xn,s()},h.clamp=function(t){return arguments.length?(u=t?ga(f):ya,h):u!==ya},h.interpolate=function(t){return arguments.length?(c=t,s()):c},h.unknown=function(t){return arguments.length?(e=t,h):e},function(e,i){return t=e,n=i,s()}}function Aa(t,n){return Ma()(t,n)}var Na=function(t,n,e,i){var r,a=_(t,n,e);switch((i=Li(null==i?",f":i)).type){case"s":var f=Math.max(Math.abs(t),Math.abs(n));return null!=i.precision||isNaN(r=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ui(n)/3)))-Ui(Math.abs(t)))}(a,f))||(i.precision=r),Fi(i,f);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(r=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Ui(n)-Ui(t))+1}(a,Math.max(Math.abs(t),Math.abs(n))))||(i.precision=r-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(r=function(t){return Math.max(0,-Ui(Math.abs(t)))}(a))||(i.precision=r-2*("%"===i.type))}return Oi(i)};function Ta(t){var n=t.domain;return t.ticks=function(t){var e=n();return d(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var i=n();return Na(i[0],i[i.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var i,r=n(),a=0,f=r.length-1,o=r[a],c=r[f];return c<o&&(i=o,o=c,c=i,i=a,a=f,f=i),(i=p(o,c,e))>0?i=p(o=Math.floor(o/i)*i,c=Math.ceil(c/i)*i,e):i<0&&(i=p(o=Math.ceil(o*i)/i,c=Math.floor(c*i)/i,e)),i>0?(r[a]=Math.floor(o/i)*i,r[f]=Math.ceil(c/i)*i,n(r)):i<0&&(r[a]=Math.ceil(o*i)/i,r[f]=Math.floor(c*i)/i,n(r)),t},t}var ka=new Date,Ca=new Date;function Sa(t,n,e,i){function r(n){return t(n=new Date(+n)),n}return r.floor=r,r.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},r.round=function(t){var n=r(t),e=r.ceil(t);return t-n<e-t?n:e},r.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},r.range=function(e,i,a){var f,o=[];if(e=r.ceil(e),a=null==a?1:Math.floor(a),!(e<i&&a>0))return o;do{o.push(f=new Date(+e)),n(e,a),t(e)}while(f<e&&e<i);return o},r.filter=function(e){return Sa(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;n(t,-1),!e(t););else for(;--i>=0;)for(;n(t,1),!e(t););})},e&&(r.count=function(n,i){return ka.setTime(+n),Ca.setTime(+i),t(ka),t(Ca),Math.floor(e(ka,Ca))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?function(n){return i(n)%t==0}:function(n){return r.count(0,n)%t==0}):r:null}),r}var Ea=Sa(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});Ea.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Sa(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):Ea:null};Ea.range;var Ua=6e4,Pa=6048e5,La=Sa(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Da=(La.range,Sa(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*Ua)},function(t,n){return(n-t)/Ua},function(t){return t.getMinutes()})),Ra=(Da.range,Sa(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Ua)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),ja=(Ra.range,Sa(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Ua)/864e5},function(t){return t.getDate()-1})),Oa=ja;ja.range;function Fa(t){return Sa(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Ua)/Pa})}var Ya=Fa(0),qa=Fa(1),Ia=Fa(2),Ha=Fa(3),za=Fa(4),Xa=Fa(5),$a=Fa(6),Va=(Ya.range,qa.range,Ia.range,Ha.range,za.range,Xa.range,$a.range,Sa(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Ba=(Va.range,Sa(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Ba.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Sa(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var Za=Ba,Wa=(Ba.range,Sa(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Ua)},function(t,n){return(n-t)/Ua},function(t){return t.getUTCMinutes()})),Qa=(Wa.range,Sa(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),Ja=(Qa.range,Sa(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),Ga=Ja;Ja.range;function Ka(t){return Sa(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/Pa})}var tf=Ka(0),nf=Ka(1),ef=Ka(2),rf=Ka(3),af=Ka(4),ff=Ka(5),of=Ka(6),cf=(tf.range,nf.range,ef.range,rf.range,af.range,ff.range,of.range,Sa(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),uf=(cf.range,Sa(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));uf.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Sa(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var sf=uf;uf.range;function hf(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function lf(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function df(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var pf,_f,bf,yf={"-":"",_:" ",0:"0"},vf=/^\s*\d+/,gf=/^%/,xf=/[\\^$*+?|[\]().{}]/g;function mf(t,n,e){var i=t<0?"-":"",r=(i?-t:t)+"",a=r.length;return i+(a<e?new Array(e-a+1).join(n)+r:r)}function wf(t){return t.replace(xf,"\\$&")}function Mf(t){return new RegExp("^(?:"+t.map(wf).join("|")+")","i")}function Af(t){for(var n={},e=-1,i=t.length;++e<i;)n[t[e].toLowerCase()]=e;return n}function Nf(t,n,e){var i=vf.exec(n.slice(e,e+1));return i?(t.w=+i[0],e+i[0].length):-1}function Tf(t,n,e){var i=vf.exec(n.slice(e,e+1));return i?(t.u=+i[0],e+i[0].length):-1}function kf(t,n,e){var i=vf.exec(n.slice(e,e+2));return i?(t.U=+i[0],e+i[0].length):-1}function Cf(t,n,e){var i=vf.exec(n.slice(e,e+2));return i?(t.V=+i[0],e+i[0].length):-1}function Sf(t,n,e){var i=vf.exec(n.slice(e,e+2));return i?(t.W=+i[0],e+i[0].length):-1}function Ef(t,n,e){var i=vf.exec(n.slice(e,e+4));return i?(t.y=+i[0],e+i[0].length):-1}function Uf(t,n,e){var i=vf.exec(n.slice(e,e+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),e+i[0].length):-1}function Pf(t,n,e){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),e+i[0].length):-1}function Lf(t,n,e){var i=vf.exec(n.slice(e,e+2));return i?(t.m=i[0]-1,e+i[0].length):-1}function Df(t,n,e){var i=vf.exec(n.slice(e,e+2));return i?(t.d=+i[0],e+i[0].length):-1}function Rf(t,n,e){var i=vf.exec(n.slice(e,e+3));return i?(t.m=0,t.d=+i[0],e+i[0].length):-1}function jf(t,n,e){var i=vf.exec(n.slice(e,e+2));return i?(t.H=+i[0],e+i[0].length):-1}function Of(t,n,e){var i=vf.exec(n.slice(e,e+2));return i?(t.M=+i[0],e+i[0].length):-1}function Ff(t,n,e){var i=vf.exec(n.slice(e,e+2));return i?(t.S=+i[0],e+i[0].length):-1}function Yf(t,n,e){var i=vf.exec(n.slice(e,e+3));return i?(t.L=+i[0],e+i[0].length):-1}function qf(t,n,e){var i=vf.exec(n.slice(e,e+6));return i?(t.L=Math.floor(i[0]/1e3),e+i[0].length):-1}function If(t,n,e){var i=gf.exec(n.slice(e,e+1));return i?e+i[0].length:-1}function Hf(t,n,e){var i=vf.exec(n.slice(e));return i?(t.Q=+i[0],e+i[0].length):-1}function zf(t,n,e){var i=vf.exec(n.slice(e));return i?(t.Q=1e3*+i[0],e+i[0].length):-1}function Xf(t,n){return mf(t.getDate(),n,2)}function $f(t,n){return mf(t.getHours(),n,2)}function Vf(t,n){return mf(t.getHours()%12||12,n,2)}function Bf(t,n){return mf(1+Oa.count(Za(t),t),n,3)}function Zf(t,n){return mf(t.getMilliseconds(),n,3)}function Wf(t,n){return Zf(t,n)+"000"}function Qf(t,n){return mf(t.getMonth()+1,n,2)}function Jf(t,n){return mf(t.getMinutes(),n,2)}function Gf(t,n){return mf(t.getSeconds(),n,2)}function Kf(t){var n=t.getDay();return 0===n?7:n}function to(t,n){return mf(Ya.count(Za(t),t),n,2)}function no(t,n){var e=t.getDay();return t=e>=4||0===e?za(t):za.ceil(t),mf(za.count(Za(t),t)+(4===Za(t).getDay()),n,2)}function eo(t){return t.getDay()}function io(t,n){return mf(qa.count(Za(t),t),n,2)}function ro(t,n){return mf(t.getFullYear()%100,n,2)}function ao(t,n){return mf(t.getFullYear()%1e4,n,4)}function fo(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+mf(n/60|0,"0",2)+mf(n%60,"0",2)}function oo(t,n){return mf(t.getUTCDate(),n,2)}function co(t,n){return mf(t.getUTCHours(),n,2)}function uo(t,n){return mf(t.getUTCHours()%12||12,n,2)}function so(t,n){return mf(1+Ga.count(sf(t),t),n,3)}function ho(t,n){return mf(t.getUTCMilliseconds(),n,3)}function lo(t,n){return ho(t,n)+"000"}function po(t,n){return mf(t.getUTCMonth()+1,n,2)}function _o(t,n){return mf(t.getUTCMinutes(),n,2)}function bo(t,n){return mf(t.getUTCSeconds(),n,2)}function yo(t){var n=t.getUTCDay();return 0===n?7:n}function vo(t,n){return mf(tf.count(sf(t),t),n,2)}function go(t,n){var e=t.getUTCDay();return t=e>=4||0===e?af(t):af.ceil(t),mf(af.count(sf(t),t)+(4===sf(t).getUTCDay()),n,2)}function xo(t){return t.getUTCDay()}function mo(t,n){return mf(nf.count(sf(t),t),n,2)}function wo(t,n){return mf(t.getUTCFullYear()%100,n,2)}function Mo(t,n){return mf(t.getUTCFullYear()%1e4,n,4)}function Ao(){return"+0000"}function No(){return"%"}function To(t){return+t}function ko(t){return Math.floor(+t/1e3)}!function(t){pf=function(t){var n=t.dateTime,e=t.date,i=t.time,r=t.periods,a=t.days,f=t.shortDays,o=t.months,c=t.shortMonths,u=Mf(r),s=Af(r),h=Mf(a),l=Af(a),d=Mf(f),p=Af(f),_=Mf(o),b=Af(o),y=Mf(c),v=Af(c),g={a:function(t){return f[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:Xf,e:Xf,f:Wf,H:$f,I:Vf,j:Bf,L:Zf,m:Qf,M:Jf,p:function(t){return r[+(t.getHours()>=12)]},Q:To,s:ko,S:Gf,u:Kf,U:to,V:no,w:eo,W:io,x:null,X:null,y:ro,Y:ao,Z:fo,"%":No},x={a:function(t){return f[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:oo,e:oo,f:lo,H:co,I:uo,j:so,L:ho,m:po,M:_o,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:To,s:ko,S:bo,u:yo,U:vo,V:go,w:xo,W:mo,x:null,X:null,y:wo,Y:Mo,Z:Ao,"%":No},m={a:function(t,n,e){var i=d.exec(n.slice(e));return i?(t.w=p[i[0].toLowerCase()],e+i[0].length):-1},A:function(t,n,e){var i=h.exec(n.slice(e));return i?(t.w=l[i[0].toLowerCase()],e+i[0].length):-1},b:function(t,n,e){var i=y.exec(n.slice(e));return i?(t.m=v[i[0].toLowerCase()],e+i[0].length):-1},B:function(t,n,e){var i=_.exec(n.slice(e));return i?(t.m=b[i[0].toLowerCase()],e+i[0].length):-1},c:function(t,e,i){return A(t,n,e,i)},d:Df,e:Df,f:qf,H:jf,I:jf,j:Rf,L:Yf,m:Lf,M:Of,p:function(t,n,e){var i=u.exec(n.slice(e));return i?(t.p=s[i[0].toLowerCase()],e+i[0].length):-1},Q:Hf,s:zf,S:Ff,u:Tf,U:kf,V:Cf,w:Nf,W:Sf,x:function(t,n,i){return A(t,e,n,i)},X:function(t,n,e){return A(t,i,n,e)},y:Uf,Y:Ef,Z:Pf,"%":If};function w(t,n){return function(e){var i,r,a,f=[],o=-1,c=0,u=t.length;for(e instanceof Date||(e=new Date(+e));++o<u;)37===t.charCodeAt(o)&&(f.push(t.slice(c,o)),null!=(r=yf[i=t.charAt(++o)])?i=t.charAt(++o):r="e"===i?" ":"0",(a=n[i])&&(i=a(e,r)),f.push(i),c=o+1);return f.push(t.slice(c,o)),f.join("")}}function M(t,n){return function(e){var i,r,a=df(1900);if(A(a,t,e+="",0)!=e.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(r=(i=lf(df(a.y))).getUTCDay(),i=r>4||0===r?nf.ceil(i):nf(i),i=Ga.offset(i,7*(a.V-1)),a.y=i.getUTCFullYear(),a.m=i.getUTCMonth(),a.d=i.getUTCDate()+(a.w+6)%7):(r=(i=n(df(a.y))).getDay(),i=r>4||0===r?qa.ceil(i):qa(i),i=Oa.offset(i,7*(a.V-1)),a.y=i.getFullYear(),a.m=i.getMonth(),a.d=i.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),r="Z"in a?lf(df(a.y)).getUTCDay():n(df(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(r+5)%7:a.w+7*a.U-(r+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,lf(a)):n(a)}}function A(t,n,e,i){for(var r,a,f=0,o=n.length,c=e.length;f<o;){if(i>=c)return-1;if(37===(r=n.charCodeAt(f++))){if(r=n.charAt(f++),!(a=m[r in yf?n.charAt(f++):r])||(i=a(t,e,i))<0)return-1}else if(r!=e.charCodeAt(i++))return-1}return i}return g.x=w(e,g),g.X=w(i,g),g.c=w(n,g),x.x=w(e,x),x.X=w(i,x),x.c=w(n,x),{format:function(t){var n=w(t+="",g);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",hf);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,lf);return n.toString=function(){return t},n}}}(t),pf.format,pf.parse,_f=pf.utcFormat,bf=pf.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||_f("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||bf("%Y-%m-%dT%H:%M:%S.%LZ");var Co=function(t){for(var n=t.length/6|0,e=new Array(n),i=0;i<n;)e[i]="#"+t.slice(6*i,6*++i);return e},So=Co("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Eo=(Co("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Co("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Co("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Co("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Co("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Co("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Co("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Co("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return Dn(t[t.length-1])});Eo(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Co)),Eo(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Co)),Eo(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Co)),Eo(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Co)),Eo(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Co)),Eo(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Co)),Eo(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Co)),Eo(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Co)),Eo(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Co)),Eo(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Co)),Eo(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Co)),Eo(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Co)),Eo(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Co)),Eo(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Co)),Eo(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Co)),Eo(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Co)),Eo(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Co)),Eo(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Co)),Eo(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Co)),Eo(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Co)),Eo(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Co)),Eo(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Co)),Eo(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Co)),Eo(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Co)),Eo(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Co)),Eo(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Co)),Eo(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Co)),te(An(300,.5,0),An(-240,.5,1)),te(An(-100,.75,.35),An(80,1.5,.8)),te(An(260,.75,.35),An(80,1.5,.8)),An(),$t(),Math.PI,Math.PI;function Uo(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}Uo(Co("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Uo(Co("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Uo(Co("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Uo(Co("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));var Po=function(t){return function(){return t}},Lo=Math.abs,Do=Math.atan2,Ro=Math.cos,jo=Math.max,Oo=Math.min,Fo=Math.sin,Yo=Math.sqrt,qo=1e-12,Io=Math.PI,Ho=Io/2,zo=2*Io;function Xo(t){return t>=1?Ho:t<=-1?-Ho:Math.asin(t)}function $o(t){return t.innerRadius}function Vo(t){return t.outerRadius}function Bo(t){return t.startAngle}function Zo(t){return t.endAngle}function Wo(t){return t&&t.padAngle}function Qo(t,n,e,i,r,a,f){var o=t-e,c=n-i,u=(f?a:-a)/Yo(o*o+c*c),s=u*c,h=-u*o,l=t+s,d=n+h,p=e+s,_=i+h,b=(l+p)/2,y=(d+_)/2,v=p-l,g=_-d,x=v*v+g*g,m=r-a,w=l*_-p*d,M=(g<0?-1:1)*Yo(jo(0,m*m*x-w*w)),A=(w*g-v*M)/x,N=(-w*v-g*M)/x,T=(w*g+v*M)/x,k=(-w*v+g*M)/x,C=A-b,S=N-y,E=T-b,U=k-y;return C*C+S*S>E*E+U*U&&(A=T,N=k),{cx:A,cy:N,x01:-s,y01:-h,x11:A*(r/m-1),y11:N*(r/m-1)}}var Jo=function(){var t=$o,n=Vo,e=Po(0),i=null,r=Bo,a=Zo,f=Wo,o=null;function c(){var c,u,s,h=+t.apply(this,arguments),l=+n.apply(this,arguments),d=r.apply(this,arguments)-Ho,p=a.apply(this,arguments)-Ho,_=Lo(p-d),b=p>d;if(o||(o=c=Je()),l<h&&(u=l,l=h,h=u),l>qo)if(_>zo-qo)o.moveTo(l*Ro(d),l*Fo(d)),o.arc(0,0,l,d,p,!b),h>qo&&(o.moveTo(h*Ro(p),h*Fo(p)),o.arc(0,0,h,p,d,b));else{var y,v,g=d,x=p,m=d,w=p,M=_,A=_,N=f.apply(this,arguments)/2,T=N>qo&&(i?+i.apply(this,arguments):Yo(h*h+l*l)),k=Oo(Lo(l-h)/2,+e.apply(this,arguments)),C=k,S=k;if(T>qo){var E=Xo(T/h*Fo(N)),U=Xo(T/l*Fo(N));(M-=2*E)>qo?(m+=E*=b?1:-1,w-=E):(M=0,m=w=(d+p)/2),(A-=2*U)>qo?(g+=U*=b?1:-1,x-=U):(A=0,g=x=(d+p)/2)}var P=l*Ro(g),L=l*Fo(g),D=h*Ro(w),R=h*Fo(w);if(k>qo){var j,O=l*Ro(x),F=l*Fo(x),Y=h*Ro(m),q=h*Fo(m);if(_<Io&&(j=function(t,n,e,i,r,a,f,o){var c=e-t,u=i-n,s=f-r,h=o-a,l=h*c-s*u;if(!(l*l<qo))return[t+(l=(s*(n-a)-h*(t-r))/l)*c,n+l*u]}(P,L,Y,q,O,F,D,R))){var I=P-j[0],H=L-j[1],z=O-j[0],X=F-j[1],$=1/Fo(((s=(I*z+H*X)/(Yo(I*I+H*H)*Yo(z*z+X*X)))>1?0:s<-1?Io:Math.acos(s))/2),V=Yo(j[0]*j[0]+j[1]*j[1]);C=Oo(k,(h-V)/($-1)),S=Oo(k,(l-V)/($+1))}}A>qo?S>qo?(y=Qo(Y,q,P,L,l,S,b),v=Qo(O,F,D,R,l,S,b),o.moveTo(y.cx+y.x01,y.cy+y.y01),S<k?o.arc(y.cx,y.cy,S,Do(y.y01,y.x01),Do(v.y01,v.x01),!b):(o.arc(y.cx,y.cy,S,Do(y.y01,y.x01),Do(y.y11,y.x11),!b),o.arc(0,0,l,Do(y.cy+y.y11,y.cx+y.x11),Do(v.cy+v.y11,v.cx+v.x11),!b),o.arc(v.cx,v.cy,S,Do(v.y11,v.x11),Do(v.y01,v.x01),!b))):(o.moveTo(P,L),o.arc(0,0,l,g,x,!b)):o.moveTo(P,L),h>qo&&M>qo?C>qo?(y=Qo(D,R,O,F,h,-C,b),v=Qo(P,L,Y,q,h,-C,b),o.lineTo(y.cx+y.x01,y.cy+y.y01),C<k?o.arc(y.cx,y.cy,C,Do(y.y01,y.x01),Do(v.y01,v.x01),!b):(o.arc(y.cx,y.cy,C,Do(y.y01,y.x01),Do(y.y11,y.x11),!b),o.arc(0,0,h,Do(y.cy+y.y11,y.cx+y.x11),Do(v.cy+v.y11,v.cx+v.x11),b),o.arc(v.cx,v.cy,C,Do(v.y11,v.x11),Do(v.y01,v.x01),!b))):o.arc(0,0,h,w,m,b):o.lineTo(D,R)}else o.moveTo(0,0);if(o.closePath(),c)return o=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,i=(+r.apply(this,arguments)+ +a.apply(this,arguments))/2-Io/2;return[Ro(i)*e,Fo(i)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:Po(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Po(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Po(+t),c):e},c.padRadius=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:Po(+t),c):i},c.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Po(+t),c):r},c.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:Po(+t),c):a},c.padAngle=function(t){return arguments.length?(f="function"==typeof t?t:Po(+t),c):f},c.context=function(t){return arguments.length?(o=null==t?null:t,c):o},c};function Go(t){this._context=t}Go.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Ko=function(t){return new Go(t)};function tc(t){return t[0]}function nc(t){return t[1]}var ec=function(){var t=tc,n=nc,e=Po(!0),i=null,r=Ko,a=null;function f(f){var o,c,u,s=f.length,h=!1;for(null==i&&(a=r(u=Je())),o=0;o<=s;++o)!(o<s&&e(c=f[o],o,f))===h&&((h=!h)?a.lineStart():a.lineEnd()),h&&a.point(+t(c,o,f),+n(c,o,f));if(u)return a=null,u+""||null}return f.x=function(n){return arguments.length?(t="function"==typeof n?n:Po(+n),f):t},f.y=function(t){return arguments.length?(n="function"==typeof t?t:Po(+t),f):n},f.defined=function(t){return arguments.length?(e="function"==typeof t?t:Po(!!t),f):e},f.curve=function(t){return arguments.length?(r=t,null!=i&&(a=r(i)),f):r},f.context=function(t){return arguments.length?(null==t?i=a=null:a=r(i=t),f):i},f},ic=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},rc=function(t){return t};fc(Ko);function ac(t){this._curve=t}function fc(t){function n(n){return new ac(t(n))}return n._curve=t,n}ac.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var oc=Math.sin(Io/10)/Math.sin(7*Io/10),cc=(Math.sin(zo/10),Math.cos(zo/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function uc(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function sc(t){this._context=t}sc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:uc(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:uc(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function hc(t){this._context=t}hc.prototype={areaStart:cc,areaEnd:cc,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:uc(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function lc(t){this._context=t}lc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,i):this._context.moveTo(e,i);break;case 3:this._point=4;default:uc(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function dc(t,n){this._basis=new sc(t),this._beta=n}dc.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var i,r=t[0],a=n[0],f=t[e]-r,o=n[e]-a,c=-1;++c<=e;)i=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(r+i*f),this._beta*n[c]+(1-this._beta)*(a+i*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new sc(t):new dc(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function pc(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function _c(t,n){this._context=t,this._k=(1-n)/6}_c.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:pc(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:pc(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new _c(t,n)}return e.tension=function(n){return t(+n)},e})(0);function bc(t,n){this._context=t,this._k=(1-n)/6}bc.prototype={areaStart:cc,areaEnd:cc,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:pc(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new bc(t,n)}return e.tension=function(n){return t(+n)},e})(0);function yc(t,n){this._context=t,this._k=(1-n)/6}yc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:pc(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new yc(t,n)}return e.tension=function(n){return t(+n)},e})(0);function vc(t,n,e){var i=t._x1,r=t._y1,a=t._x2,f=t._y2;if(t._l01_a>qo){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,r=(r*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>qo){var u=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*u+t._x1*t._l23_2a-n*t._l12_2a)/s,f=(f*u+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(i,r,a,f,t._x2,t._y2)}function gc(t,n){this._context=t,this._alpha=n}gc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:vc(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var xc=function t(n){function e(t){return n?new gc(t,n):new _c(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function mc(t,n){this._context=t,this._alpha=n}mc.prototype={areaStart:cc,areaEnd:cc,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:vc(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new mc(t,n):new bc(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function wc(t,n){this._context=t,this._alpha=n}wc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:vc(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new wc(t,n):new yc(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Mc(t){this._context=t}Mc.prototype={areaStart:cc,areaEnd:cc,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function Ac(t){return t<0?-1:1}function Nc(t,n,e){var i=t._x1-t._x0,r=n-t._x1,a=(t._y1-t._y0)/(i||r<0&&-0),f=(e-t._y1)/(r||i<0&&-0),o=(a*r+f*i)/(i+r);return(Ac(a)+Ac(f))*Math.min(Math.abs(a),Math.abs(f),.5*Math.abs(o))||0}function Tc(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function kc(t,n,e){var i=t._x0,r=t._y0,a=t._x1,f=t._y1,o=(a-i)/3;t._context.bezierCurveTo(i+o,r+o*n,a-o,f-o*e,a,f)}function Cc(t){this._context=t}function Sc(t){this._context=new Ec(t)}function Ec(t){this._context=t}function Uc(t){this._context=t}function Pc(t){var n,e,i=t.length-1,r=new Array(i),a=new Array(i),f=new Array(i);for(r[0]=0,a[0]=2,f[0]=t[0]+2*t[1],n=1;n<i-1;++n)r[n]=1,a[n]=4,f[n]=4*t[n]+2*t[n+1];for(r[i-1]=2,a[i-1]=7,f[i-1]=8*t[i-1]+t[i],n=1;n<i;++n)e=r[n]/a[n-1],a[n]-=e,f[n]-=e*f[n-1];for(r[i-1]=f[i-1]/a[i-1],n=i-2;n>=0;--n)r[n]=(f[n]-r[n+1])/a[n];for(a[i-1]=(t[i]+r[i-1])/2,n=0;n<i-1;++n)a[n]=2*t[n+1]-r[n+1];return[r,a]}Cc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:kc(this,this._t0,Tc(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,kc(this,Tc(this,e=Nc(this,t,n)),e);break;default:kc(this,this._t0,e=Nc(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Sc.prototype=Object.create(Cc.prototype)).point=function(t,n){Cc.prototype.point.call(this,n,t)},Ec.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,i,r,a){this._context.bezierCurveTo(n,t,i,e,a,r)}},Uc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var i=Pc(t),r=Pc(n),a=0,f=1;f<e;++a,++f)this._context.bezierCurveTo(i[0][a],r[0][a],i[1][a],r[1][a],t[f],n[f]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function Lc(t,n){this._context=t,this._t=n}Lc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function Dc(){this._=null}function Rc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function jc(t,n){var e=n,i=n.R,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.R=i.L,e.R&&(e.R.U=e),i.L=e}function Oc(t,n){var e=n,i=n.L,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.L=i.R,e.L&&(e.L.U=e),i.R=e}function Fc(t){for(;t.L;)t=t.L;return t}Dc.prototype={constructor:Dc,insert:function(t,n){var e,i,r;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Fc(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(i=e.U).L?(r=i.R)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.R&&(jc(this,e),e=(t=e).U),e.C=!1,i.C=!0,Oc(this,i)):(r=i.L)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.L&&(Oc(this,e),e=(t=e).U),e.C=!1,i.C=!0,jc(this,i)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,i,r=t.U,a=t.L,f=t.R;if(e=a?f?Fc(f):a:f,r?r.L===t?r.L=e:r.R=e:this._=e,a&&f?(i=e.C,e.C=t.C,e.L=a,a.U=e,e!==f?(r=e.U,e.U=t.U,t=e.R,r.L=t,e.R=f,f.U=e):(e.U=r,r=e,t=e.R)):(i=t.C,t=e),t&&(t.U=r),!i)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===r.L){if((n=r.R).C&&(n.C=!1,r.C=!0,jc(this,r),n=r.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Oc(this,n),n=r.R),n.C=r.C,r.C=n.R.C=!1,jc(this,r),t=this._;break}}else if((n=r.L).C&&(n.C=!1,r.C=!0,Oc(this,r),n=r.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,jc(this,n),n=r.L),n.C=r.C,r.C=n.L.C=!1,Oc(this,r),t=this._;break}n.C=!0,t=r,r=r.U}while(!t.C);t&&(t.C=!1)}}};var Yc=Dc;function qc(t,n,e,i){var r=[null,null],a=su.push(r)-1;return r.left=t,r.right=n,e&&Hc(r,t,n,e),i&&Hc(r,n,t,i),cu[t.index].halfedges.push(a),cu[n.index].halfedges.push(a),r}function Ic(t,n,e){var i=[n,e];return i.left=t,i}function Hc(t,n,e,i){t[0]||t[1]?t.left===e?t[1]=i:t[0]=i:(t[0]=i,t.left=n,t.right=e)}function zc(t,n,e,i,r){var a,f=t[0],o=t[1],c=f[0],u=f[1],s=0,h=1,l=o[0]-c,d=o[1]-u;if(a=n-c,l||!(a>0)){if(a/=l,l<0){if(a<s)return;a<h&&(h=a)}else if(l>0){if(a>h)return;a>s&&(s=a)}if(a=i-c,l||!(a<0)){if(a/=l,l<0){if(a>h)return;a>s&&(s=a)}else if(l>0){if(a<s)return;a<h&&(h=a)}if(a=e-u,d||!(a>0)){if(a/=d,d<0){if(a<s)return;a<h&&(h=a)}else if(d>0){if(a>h)return;a>s&&(s=a)}if(a=r-u,d||!(a<0)){if(a/=d,d<0){if(a>h)return;a>s&&(s=a)}else if(d>0){if(a<s)return;a<h&&(h=a)}return!(s>0||h<1)||(s>0&&(t[0]=[c+s*l,u+s*d]),h<1&&(t[1]=[c+h*l,u+h*d]),!0)}}}}}function Xc(t,n,e,i,r){var a=t[1];if(a)return!0;var f,o,c=t[0],u=t.left,s=t.right,h=u[0],l=u[1],d=s[0],p=s[1],_=(h+d)/2,b=(l+p)/2;if(p===l){if(_<n||_>=i)return;if(h>d){if(c){if(c[1]>=r)return}else c=[_,e];a=[_,r]}else{if(c){if(c[1]<e)return}else c=[_,r];a=[_,e]}}else if(o=b-(f=(h-d)/(p-l))*_,f<-1||f>1)if(h>d){if(c){if(c[1]>=r)return}else c=[(e-o)/f,e];a=[(r-o)/f,r]}else{if(c){if(c[1]<e)return}else c=[(r-o)/f,r];a=[(e-o)/f,e]}else if(l<p){if(c){if(c[0]>=i)return}else c=[n,f*n+o];a=[i,f*i+o]}else{if(c){if(c[0]<n)return}else c=[i,f*i+o];a=[n,f*n+o]}return t[0]=c,t[1]=a,!0}function $c(t,n){var e=t.site,i=n.left,r=n.right;return e===r&&(r=i,i=e),r?Math.atan2(r[1]-i[1],r[0]-i[0]):(e===i?(i=n[1],r=n[0]):(i=n[0],r=n[1]),Math.atan2(i[0]-r[0],r[1]-i[1]))}function Vc(t,n){return n[+(n.left!==t.site)]}function Bc(t,n){return n[+(n.left===t.site)]}var Zc,Wc=[];function Qc(){Rc(this),this.x=this.y=this.arc=this.site=this.cy=null}function Jc(t){var n=t.P,e=t.N;if(n&&e){var i=n.site,r=t.site,a=e.site;if(i!==a){var f=r[0],o=r[1],c=i[0]-f,u=i[1]-o,s=a[0]-f,h=a[1]-o,l=2*(c*h-u*s);if(!(l>=-lu)){var d=c*c+u*u,p=s*s+h*h,_=(h*d-u*p)/l,b=(c*p-s*d)/l,y=Wc.pop()||new Qc;y.arc=t,y.site=r,y.x=_+f,y.y=(y.cy=b+o)+Math.sqrt(_*_+b*b),t.circle=y;for(var v=null,g=uu._;g;)if(y.y<g.y||y.y===g.y&&y.x<=g.x){if(!g.L){v=g.P;break}g=g.L}else{if(!g.R){v=g;break}g=g.R}uu.insert(v,y),v||(Zc=y)}}}}function Gc(t){var n=t.circle;n&&(n.P||(Zc=n.N),uu.remove(n),Wc.push(n),Rc(n),t.circle=null)}var Kc=[];function tu(){Rc(this),this.edge=this.site=this.circle=null}function nu(t){var n=Kc.pop()||new tu;return n.site=t,n}function eu(t){Gc(t),ou.remove(t),Kc.push(t),Rc(t)}function iu(t){var n=t.circle,e=n.x,i=n.cy,r=[e,i],a=t.P,f=t.N,o=[t];eu(t);for(var c=a;c.circle&&Math.abs(e-c.circle.x)<hu&&Math.abs(i-c.circle.cy)<hu;)a=c.P,o.unshift(c),eu(c),c=a;o.unshift(c),Gc(c);for(var u=f;u.circle&&Math.abs(e-u.circle.x)<hu&&Math.abs(i-u.circle.cy)<hu;)f=u.N,o.push(u),eu(u),u=f;o.push(u),Gc(u);var s,h=o.length;for(s=1;s<h;++s)u=o[s],c=o[s-1],Hc(u.edge,c.site,u.site,r);c=o[0],(u=o[h-1]).edge=qc(c.site,u.site,null,r),Jc(c),Jc(u)}function ru(t){for(var n,e,i,r,a=t[0],f=t[1],o=ou._;o;)if((i=au(o,f)-a)>hu)o=o.L;else{if(!((r=a-fu(o,f))>hu)){i>-hu?(n=o.P,e=o):r>-hu?(n=o,e=o.N):n=e=o;break}if(!o.R){n=o;break}o=o.R}!function(t){cu[t.index]={site:t,halfedges:[]}}(t);var c=nu(t);if(ou.insert(n,c),n||e){if(n===e)return Gc(n),e=nu(n.site),ou.insert(c,e),c.edge=e.edge=qc(n.site,c.site),Jc(n),void Jc(e);if(e){Gc(n),Gc(e);var u=n.site,s=u[0],h=u[1],l=t[0]-s,d=t[1]-h,p=e.site,_=p[0]-s,b=p[1]-h,y=2*(l*b-d*_),v=l*l+d*d,g=_*_+b*b,x=[(b*v-d*g)/y+s,(l*g-_*v)/y+h];Hc(e.edge,u,p,x),c.edge=qc(u,t,null,x),e.edge=qc(t,p,null,x),Jc(n),Jc(e)}else c.edge=qc(n.site,c.site)}}function au(t,n){var e=t.site,i=e[0],r=e[1],a=r-n;if(!a)return i;var f=t.P;if(!f)return-1/0;var o=(e=f.site)[0],c=e[1],u=c-n;if(!u)return o;var s=o-i,h=1/a-1/u,l=s/u;return h?(-l+Math.sqrt(l*l-2*h*(s*s/(-2*u)-c+u/2+r-a/2)))/h+i:(i+o)/2}function fu(t,n){var e=t.N;if(e)return au(e,n);var i=t.site;return i[1]===n?i[0]:1/0}var ou,cu,uu,su,hu=1e-6,lu=1e-12;function du(t,n){return n[1]-t[1]||n[0]-t[0]}function pu(t,n){var e,i,r,a=t.sort(du).pop();for(su=[],cu=new Array(t.length),ou=new Yc,uu=new Yc;;)if(r=Zc,a&&(!r||a[1]<r.y||a[1]===r.y&&a[0]<r.x))a[0]===e&&a[1]===i||(ru(a),e=a[0],i=a[1]),a=t.pop();else{if(!r)break;iu(r.arc)}if(function(){for(var t,n,e,i,r=0,a=cu.length;r<a;++r)if((t=cu[r])&&(i=(n=t.halfedges).length)){var f=new Array(i),o=new Array(i);for(e=0;e<i;++e)f[e]=e,o[e]=$c(t,su[n[e]]);for(f.sort(function(t,n){return o[n]-o[t]}),e=0;e<i;++e)o[e]=n[f[e]];for(e=0;e<i;++e)n[e]=o[e]}}(),n){var f=+n[0][0],o=+n[0][1],c=+n[1][0],u=+n[1][1];!function(t,n,e,i){for(var r,a=su.length;a--;)Xc(r=su[a],t,n,e,i)&&zc(r,t,n,e,i)&&(Math.abs(r[0][0]-r[1][0])>hu||Math.abs(r[0][1]-r[1][1])>hu)||delete su[a]}(f,o,c,u),function(t,n,e,i){var r,a,f,o,c,u,s,h,l,d,p,_,b=cu.length,y=!0;for(r=0;r<b;++r)if(a=cu[r]){for(f=a.site,o=(c=a.halfedges).length;o--;)su[c[o]]||c.splice(o,1);for(o=0,u=c.length;o<u;)p=(d=Bc(a,su[c[o]]))[0],_=d[1],h=(s=Vc(a,su[c[++o%u]]))[0],l=s[1],(Math.abs(p-h)>hu||Math.abs(_-l)>hu)&&(c.splice(o,0,su.push(Ic(f,d,Math.abs(p-t)<hu&&i-_>hu?[t,Math.abs(h-t)<hu?l:i]:Math.abs(_-i)<hu&&e-p>hu?[Math.abs(l-i)<hu?h:e,i]:Math.abs(p-e)<hu&&_-n>hu?[e,Math.abs(h-e)<hu?l:n]:Math.abs(_-n)<hu&&p-t>hu?[Math.abs(l-n)<hu?h:t,n]:null))-1),++u);u&&(y=!1)}if(y){var v,g,x,m=1/0;for(r=0,y=null;r<b;++r)(a=cu[r])&&(x=(v=(f=a.site)[0]-t)*v+(g=f[1]-n)*g)<m&&(m=x,y=a);if(y){var w=[t,n],M=[t,i],A=[e,i],N=[e,n];y.halfedges.push(su.push(Ic(f=y.site,w,M))-1,su.push(Ic(f,M,A))-1,su.push(Ic(f,A,N))-1,su.push(Ic(f,N,w))-1)}}for(r=0;r<b;++r)(a=cu[r])&&(a.halfedges.length||delete cu[r])}(f,o,c,u)}this.edges=su,this.cells=cu,ou=uu=su=cu=null}pu.prototype={constructor:pu,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return Vc(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,i){if(a=(r=e.halfedges).length)for(var r,a,f,o,c,u,s=e.site,h=-1,l=n[r[a-1]],d=l.left===s?l.right:l.left;++h<a;)f=d,d=(l=n[r[h]]).left===s?l.right:l.left,f&&d&&i<f.index&&i<d.index&&(c=f,u=d,((o=s)[0]-u[0])*(c[1]-o[1])-(o[0]-c[0])*(u[1]-o[1])<0)&&t.push([s.data,f.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var i,r,a=this,f=a._found||0,o=a.cells.length;!(r=a.cells[f]);)if(++f>=o)return null;var c=t-r.site[0],u=n-r.site[1],s=c*c+u*u;do{r=a.cells[i=f],f=null,r.halfedges.forEach(function(e){var i=a.edges[e],o=i.left;if(o!==r.site&&o||(o=i.right)){var c=t-o[0],u=n-o[1],h=c*c+u*u;h<s&&(s=h,f=o.index)}})}while(null!==f);return a._found=i,null==e||s<=e*e?r.site:null}};function _u(t,n,e){this.k=t,this.x=n,this.y=e}_u.prototype={constructor:_u,scale:function(t){return 1===t?this:new _u(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new _u(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new _u(1,0,0);_u.prototype;var bu,yu=function(){var t=Object.prototype.toString,n=Object.prototype.hasOwnProperty,e={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object Array]":"array","[object Date]":"date","[object RegExp]":"regExp","[object Object]":"object"};function i(n){return null==n?String(n):e[t.call(n)]||"object"}var r=Array.isArray||function(t){return"array"===i(t)},a=function(t){if(!t||"object"!==i(t)||t.nodeType||function(t){return t&&"object"==typeof t&&"setInterval"in t}(t))return!1;if(t.constructor&&!n.call(t,"constructor")&&!n.call(t.constructor.prototype,"isPrototypeOf"))return!1;var e;for(e in t);return void 0===e||n.call(t,e)},f=function(t,n,e){for(var i in e)if(e.hasOwnProperty(i)){var o=n[i],c=e[i],u=void 0;if(n===c)continue;t&&c&&(a(c)||r(c))?(r(c)?(!1,u=o&&r(o)?o:[]):u=o&&a(o)?o:{},n[i]=f(t,u,c)):void 0!==c&&(n[i]=c)}return n};return{extend:f}}(),vu=function(){function t(t,n){this.data=[],yu.extend(!0,this,n),this.el=t,this.svg=wt(this.el)}return t.prototype.processData=function(){this.ascending?this.data.sort(function(t,n){return t.value-n.value}):this.descending&&this.data.sort(function(t,n){return n.value-t.value})},t}(),gu=(bu=function(t,n){return(bu=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}bu(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),xu=(function(t){function n(n,e){var i=t.call(this,n,e)||this;return i.width=500,i.height=500,i.margin={top:20,left:40,right:20,bottom:20},i.textInness=20,i.hasAnimatetion=!0,i.colorList=So,i.init(),i}gu(n,t),n.prototype.init=function(){this.R=this.width-this.margin.left-this.margin.right,this.radius=this.R/2,this.pie=function(){var t=rc,n=ic,e=null,i=Po(0),r=Po(zo),a=Po(0);function f(f){var o,c,u,s,h,l=f.length,d=0,p=new Array(l),_=new Array(l),b=+i.apply(this,arguments),y=Math.min(zo,Math.max(-zo,r.apply(this,arguments)-b)),v=Math.min(Math.abs(y)/l,a.apply(this,arguments)),g=v*(y<0?-1:1);for(o=0;o<l;++o)(h=_[p[o]=o]=+t(f[o],o,f))>0&&(d+=h);for(null!=n?p.sort(function(t,e){return n(_[t],_[e])}):null!=e&&p.sort(function(t,n){return e(f[t],f[n])}),o=0,u=d?(y-l*g)/d:0;o<l;++o,b=s)c=p[o],s=b+((h=_[c])>0?h*u:0)+g,_[c]={data:f[c],index:o,value:h,startAngle:b,endAngle:s,padAngle:v};return _}return f.value=function(n){return arguments.length?(t="function"==typeof n?n:Po(+n),f):t},f.sortValues=function(t){return arguments.length?(n=t,e=null,f):n},f.sort=function(t){return arguments.length?(e=t,n=null,f):e},f.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Po(+t),f):i},f.endAngle=function(t){return arguments.length?(r="function"==typeof t?t:Po(+t),f):r},f.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Po(+t),f):a},f}().sort(null).value(function(t){return t.value}),this.path=Jo().outerRadius(this.radius).innerRadius(0),this.transition=Jo().outerRadius(1).innerRadius(0),this.label=Jo().outerRadius(this.radius+this.textInness).innerRadius(this.radius+this.textInness),this.group=this.svg.append("g").attr("transform","translate("+((this.width-this.R)/2+this.radius)+","+((this.width-this.R)/2+this.radius)+")"),this.processData(),this.addArc()},n.prototype.animate=function(){this.paths.transition().duration(500).delay(function(t,n){return 200*n}).attr("d",this.path)},n.prototype.addArc=function(){var t=this;this.arc=this.group.selectAll(".pie").data(this.pie(this.data)).enter().append("g").attr("class",".pie"),this.paths=this.arc.append("path").attr("d",this.transition).attr("class","piePath").attr("fill",function(n,e){return t.colorList[e]}),this.arc.append("text").attr("transform",function(n){return"translate("+t.label.centroid(n)+")"}).attr("dy","-.5em").attr("dx","3").attr("font-size",12).style("text-anchor","middle").text(function(t){return t.data.name}),this.hasAnimatetion?this.animate():this.arc.selectAll(".piePath").attr("d",this.path)}}(vu),function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function i(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}}());!function(t){function n(n,e){var i=t.call(this,n,e)||this;return i.width=500,i.height=500,i.margin={top:20,left:40,right:20,bottom:20},i.textInness=20,i.hasAnimatetion=!0,i.colorList=So,i.lineThickness=2,i.MAXTop=30,i.hasXAxis={show:!0,ticks:6},i.hasYAxis={show:!0,ticks:6},i.init(),i}xu(n,t),n.prototype.init=function(){this.group=this.svg.append("g").attr("transform","translate("+this.margin.left+","+this.margin.top+")"),this.processData(),this.addXAxis(),this.addYAxis(),this.addLine()},n.prototype.addXAxis=function(){var t;(this.xScale=da().rangeRound([0,this.width-this.margin.left-this.margin.right]).paddingInner(1).domain(this.data.map(function(t){return t.name})),this.hasXAxis.show)&&(this.xAxis=this.group.append("g").attr("transform","translate(0,"+(this.height-this.margin.top-this.margin.bottom)+")").call((t=this.xScale,C(w,t))))},n.prototype.addYAxis=function(){var t;(this.yScale=function t(){var n=Aa(ya,ya);return n.copy=function(){return wa(n,t())},ca.apply(n,arguments),Ta(n)}().rangeRound([this.height-this.margin.bottom-this.margin.top,this.margin.top]).domain([0,b(this.data.map(function(t){return t.value+30}))]),this.hasYAxis.show)&&(this.yAxis=this.group.append("g").call((t=this.yScale,C(M,t)).ticks(5)))},n.prototype.animate=function(){this.group.append("defs").append("clipPath").attr("id",""+this.lineClipId).append("rect").attr("x",0).attr("y",0).attr("width",1).attr("height",this.height).transition().duration(3e3).attr("width",this.height)},n.prototype.addLine=function(){var t=this;this.lineClipId=(new Date).getTime(),this.group.selectAll(".circle").data(this.data).enter().append("circle").attr("class","circle").attr("cx",function(n){return t.xScale(n.name)}).attr("cy",function(n){return t.yScale(n.value)}).attr("r",10).attr("fill",function(n,e){return t.colorList[e]}),this.group.selectAll(".lineCircle").data(this.data).enter().append("circle").attr("class","lineCircle").attr("cx",function(n){return t.xScale(n.name)}).attr("cy",function(n){return t.yScale(n.value)}).attr("r",10).attr("stroke",function(n,e){return t.colorList[e]}).attr("stroke-width","4").attr("fill","none"),this.group.selectAll(".lineOuterCircle").data(this.data).enter().append("circle").attr("class","lineOuterCircle").attr("cx",function(n){return t.xScale(n.name)}).attr("cy",function(n){return t.yScale(n.value)}).attr("r",10).attr("stroke","rgb(0,0,0)").attr("opacity","0.1").attr("stroke-width","4").attr("fill","none"),this.line=ec().x(function(n){return t.xScale(n.name)}).y(function(n){return t.yScale(n.value)}).curve(xc.alpha(1)),this.group.append("path").datum(this.data).attr("class","line").attr("fill","none").attr("stroke","rgb(82,180,255)").attr("opacity","0.3").attr("stroke-linejoin","round").attr("stroke-linecap","round").attr("stroke-width",this.lineThickness).attr("d",this.line).attr("clip-path","url(#"+this.lineClipId+")"),this.hasAnimatetion&&this.animate()}}(vu)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,